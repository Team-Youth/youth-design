{"version":3,"sources":["../../../src/tokens/colors.ts","../../../src/tokens/typography.ts","../../../src/components/font/Font.tsx","../../../src/components/chips/Chips.tsx"],"names":["fontWeight","jsx"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Color Design Tokens\n * 브랜드 아이덴티티와 UI 의미 전달을 위한 컬러 시스템\n */\n\n// All colors export\nexport const colors = {\n  primary: {\n    /** 브랜드 아이덴티티를 대표하는 메인 컬러 */\n    mainviolet: '#7248D9',\n\n    /** 중립적인 컬러 - Typography 및 넓은 영역 Fill에 사용 */\n    gray: {\n      900: '#171717',\n      800: '#292929',\n      700: '#595959',\n      600: '#7A7A7A',\n      500: '#999999',\n      400: '#B8B8B8',\n      300: '#D6D6D6',\n      200: '#EBEBEB',\n      100: '#F5F5F5',\n      black: '#000000',\n      white: '#FFFFFF',\n    },\n\n    /** 넓은 영역에서 Fill로 사용 가능한 중립 색상 계열 */\n    coolGray: {\n      900: '#151719',\n      800: '#25282D',\n      700: '#393F46',\n      600: '#505862',\n      500: '#6E7887',\n      400: '#8D97A5',\n      300: '#AFB6C0',\n      200: '#D1D5DB',\n      100: '#E8EAED',\n      50: '#F3F5F6',\n    },\n\n    /** 메인 컬러보다는 덜 강조되지만, 일러스트 및 보조 정보 강조에 사용 */\n    tint: {\n      violet: {\n        700: '#4B1FA3',\n        600: '#5B27C4',\n        500: '#7248D9',\n        400: '#8B6EE4',\n        300: '#A88FEA',\n        200: '#C8B7F4',\n        100: '#E5DEF9',\n        50: '#F8F4FE',\n      },\n      blue: {\n        700: '#0038B8',\n        600: '#004AF5',\n        500: '#2F6EFF',\n        400: '#5C92FF',\n        300: '#8FB4FF',\n        200: '#C2D6FF',\n        100: '#E0EBFF',\n        50: '#F0F5FF',\n      },\n      red: {\n        700: '#C70000',\n        600: '#E51A1A',\n        500: '#FF2E2E',\n        400: '#FF6666',\n        300: '#FF9494',\n        200: '#FFC2C2',\n        100: '#FFE0E0',\n        50: '#FFF0F0',\n      },\n      yellow: {\n        700: '#F59B00',\n        600: '#FFB200',\n        500: '#FFCC00',\n        400: '#FFDA47',\n        300: '#FFE785',\n        200: '#FFF1B8',\n        100: '#FFF7D6',\n        50: '#FFFAE5',\n      },\n      green: {\n        700: '#00996B',\n        600: '#00AD74',\n        500: '#00C785',\n        400: '#55DD99',\n        300: '#88E7B8',\n        200: '#BBF2D2',\n        100: '#DDF8E6',\n        50: '#F0FFF5',\n      },\n    },\n  },\n\n  /** 텍스트, 상태, 배경, 보더, 비활성, Dim 등 UI 의미 전달용 컬러셋 */\n  semantic: {\n    text: {\n      /** 콘텐츠에서 가장 중요한 정보를 전달할 때 사용 */\n      primary: '#25282D',\n      /** 주요 정보 외의 부가적인 내용을 전달할 때 사용 */\n      secondary: '#505862',\n      /** 시각적 우선순위가 낮은 텍스트에 사용 */\n      tertiary: '#8D97A5',\n      /** 상호작용이 불가능하거나 비활성화된 상태의 텍스트에 사용 */\n      disabled: '#D1D5DB',\n      /** 어두운 배경 위에 사용되는 밝은 텍스트 컬러 */\n      inverse: '#FFFFFF',\n    },\n    state: {\n      /** 작업 완료, 저장 성공 등 긍정적인 상태를 나타냄 */\n      success: '#00C785',\n      /** 주의가 필요한 상황이나 경고 메시지를 전달할 때 사용 */\n      warning: '#FFCC00',\n      /** 오류 상태나 실패 메시지를 표시할 때 사용 */\n      error: '#FF2E2E',\n      /** 보조적인 정보나 안내 메시지를 전달할 때 사용 */\n      info: '#2F6EFF',\n    },\n    background: {\n      /** 기본 페이지 또는 레이아웃의 배경으로 사용 */\n      primary: '#FFFFFF',\n      /** Primary 배경과 대비를 주어 시각적 계층을 형성할 때 사용 */\n      secondary: '#E8EAED',\n    },\n    border: {\n      /** 강조보다는 미묘한 구분을 목적으로 하며, 디바이더 역할까지 겸함 */\n      default: '#EBEBEB',\n      /** 콘텐츠 간의 명확한 구획이 필요할 때 사용하는 보더 컬러 */\n      strong: '#D6D6D6',\n    },\n    disabled: {\n      /** 텍스트 또는 아이콘이 비활성 상태임을 나타낼 때 사용 */\n      foreground: '#D1D5DB',\n      /** 버튼, 입력 필드 등 UI가 비활성화된 배경으로 사용 */\n      background: '#F3F5F6',\n    },\n    dim: {\n      /** 모달, 드롭다운 등 레이어 위에 표시되는 오버레이 배경 */\n      overlay: '#000000B3',\n    },\n  },\n\n  /** 의료 플랫폼 특성을 반영해 피부, 머리카락, 장기 표현용 컬러 */\n  illustration: {\n    skin: {\n      /** 피부 표현 시 밝은 톤으로 사용 */\n      light: '#FFEBE1',\n      /** 피부 기본 톤을 표현할 때 사용 */\n      base: '#FFDAC4',\n      /** 피부 음영 표현용 컬러 */\n      shadow: '#FFCBB7',\n      /** 피부 깊은 음영이나 입체감을 줄 때 사용 */\n      deepshadow: '#F8B29C',\n    },\n    hair: {\n      /** 머리카락 하이라이트 표현용 컬러 */\n      light: '#706965',\n      /** 머리카락 기본 색상을 표현할 때 사용 */\n      base: '#37322F',\n      /** 머리카락 음영 및 입체감 표현용 컬러 */\n      shadow: '#1A1716',\n    },\n    organ: {\n      /** 긍정적 상태나 특정 장기 강조용 컬러 */\n      light: '#FFB5B5',\n      /** 장기 표현 시 기본 색상으로 사용 */\n      base: '#FF8F8F',\n      /** 장기 음영 표현용 컬러 */\n      shadow: '#FB7474',\n      /** 장기 깊은 음영이나 강조를 위해 사용 */\n      deepshadow: '#CD5151',\n    },\n  },\n} as const;\n\n// Type definitions\nexport type ColorTokens = typeof colors;\nexport type PrimaryColors = typeof colors.primary;\nexport type SemanticColors = typeof colors.semantic;\nexport type IllustrationColors = typeof colors.illustration;\n\n// 하위 호환성을 위한 개별 export (deprecated)\n/** @deprecated colors.primary 사용을 권장합니다 */\nexport const primary = colors.primary.mainviolet;\n\n/** @deprecated colors.primary.gray 사용을 권장합니다 */\nexport const gray = colors.primary.gray;\n\n/** @deprecated colors.primary.coolGray 사용을 권장합니다 */\nexport const coolGray = colors.primary.coolGray;\n\n/** @deprecated colors.primary.tint 사용을 권장합니다 */\nexport const tint = colors.primary.tint;\n\n/** @deprecated colors.semantic 사용을 권장합니다 */\nexport const semantic = colors.semantic;\n\n/** @deprecated colors.illustration 사용을 권장합니다 */\nexport const illustration = colors.illustration;\n","/**\n * Typography Design Tokens\n * 서비스와 사용자가 커뮤니케이션하는 주요 요소\n */\n\n// Font Family\nexport const fontFamily = {\n  /** 웹사이트에 사용되는 모든 폰트는 Pretendard를 기반으로 함 */\n  primary: 'Pretendard',\n} as const;\n\n// Font Sizes (rem 단위로 반응형 지원)\nexport const fontSize = {\n  xxxxl: '2rem', // 32px\n  xxxl: '1.75rem', // 28px\n  xxl: '1.5rem', // 24px\n  xl: '1.25rem', // 20px\n  l: '1.125rem', // 18px\n  m: '1rem', // 16px\n  s: '0.875rem', // 14px\n  xs: '0.75rem', // 12px\n  xxs: '0.625rem', // 10px\n  xxxs: '0.688rem', // 11px\n} as const;\n\n// Font Weights\nexport const fontWeight = {\n  bold: 700,\n  semibold: 600,\n  medium: 500,\n  regular: 400,\n} as const;\n\n// Line Heights\nexport const lineHeight = {\n  xxxxl: '42px',\n  xxxl: '36px',\n  xxl: '32px',\n  xl: '28px',\n  l: '24px',\n  m: '24px',\n  s: '22px',\n  xs: '20px',\n  xxs: '18px',\n  xxxs: '17px',\n} as const;\n\n// Letter Spacings\nexport const letterSpacing = {\n  m: '0',\n  s: '-1%',\n  xs: '-2%',\n} as const;\n\n// Text Styles (React.CSSProperties 호환)\nexport const textStyles = {\n  /** 주목도를 높이고 큰 타이틀 영역 강조에 사용 */\n  display1: {\n    fontSize: fontSize.xxxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 중간 크기 타이틀에 사용 */\n  display2: {\n    fontSize: fontSize.xxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 정보성 카드 타이틀에 주로 사용 */\n  heading1: {\n    fontSize: fontSize.xxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 섹션 구분 타이틀 등에 사용 */\n  heading2: {\n    fontSize: fontSize.xl,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.xl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 소제목 등에 사용 */\n  heading3: {\n    fontSize: fontSize.l,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 리스트 아이템, 버튼 텍스트 등에 사용 */\n  heading4: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.m,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 부가 정보, 캡션 등에 사용 */\n  heading5: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 주요 본문 텍스트에 사용 */\n  body1: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 본문 텍스트에 사용 */\n  body2: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 본문 보조, 하위 위계 텍스트 쓰임새로 사용 권장 */\n  body3: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xxs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 정보나 컴포넌트 레벨에서 사용 */\n  caption: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n} as const;\n\n// All typography export\nexport const typography = {\n  fontFamily,\n  fontSize,\n  fontWeight,\n  lineHeight,\n  letterSpacing,\n  textStyles,\n} as const;\n\nexport default typography;\n","import React, { ReactNode } from 'react';\nimport { textStyles, fontWeight as fontWeightTokens } from '../../tokens/typography';\nimport { colors } from '../../tokens/colors';\n\n// Typography variant types from our design system\nexport type FontType = keyof typeof textStyles;\n\n// Font weight types from our design system\nexport type FontWeight = keyof typeof fontWeightTokens;\n\nexport interface FontProps {\n  /** Typography variant (display1, display2, heading1, etc.) */\n  type: FontType;\n  /** Font weight override (bold, semibold, medium, regular) */\n  fontWeight?: FontWeight;\n  /** Text color */\n  color?: string;\n  /** Hover color */\n  hoverColor?: string;\n  /** Text alignment */\n  align?: 'left' | 'center' | 'right' | 'justify';\n  /** White space handling */\n  whiteSpace?: 'nowrap' | 'normal' | 'pre-line';\n  /** Text overflow with ellipsis */\n  noWhiteSpace?: boolean;\n  /** Underline decoration */\n  underline?: boolean;\n  /** Custom className */\n  className?: string;\n  /** Custom styles */\n  style?: React.CSSProperties;\n  /** Children content */\n  children?: ReactNode;\n}\n\nexport const Font: React.FC<FontProps> = ({\n  type,\n  fontWeight,\n  color = colors.semantic.text.primary,\n  hoverColor,\n  align = 'left',\n  whiteSpace,\n  noWhiteSpace = false,\n  underline = false,\n  className,\n  style,\n  children,\n}) => {\n  const baseStyle = textStyles[type];\n\n  const fontStyles: React.CSSProperties = {\n    ...baseStyle,\n    // Override font weight if provided\n    ...(fontWeight && { fontWeight: fontWeightTokens[fontWeight] }),\n    color: color,\n    textAlign: align,\n    whiteSpace: noWhiteSpace ? 'nowrap' : whiteSpace || 'normal',\n    wordBreak: 'keep-all',\n    textOverflow: noWhiteSpace ? 'ellipsis' : undefined,\n    overflow: noWhiteSpace ? 'hidden' : undefined,\n    textDecoration: underline ? 'underline' : 'none',\n    margin: 0,\n    padding: 0,\n    transition: 'color 0.2s ease',\n    ...style,\n  };\n\n  const handleMouseEnter = (e: React.MouseEvent<HTMLElement>) => {\n    if (hoverColor) {\n      e.currentTarget.style.color = hoverColor;\n    }\n  };\n\n  const handleMouseLeave = (e: React.MouseEvent<HTMLElement>) => {\n    if (hoverColor) {\n      e.currentTarget.style.color = color;\n    }\n  };\n\n  return (\n    <span\n      style={fontStyles}\n      className={className}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport default Font;\n","import React, { useState } from 'react';\nimport { colors } from '../../tokens/colors';\nimport { Font } from '../font/Font';\nimport './Chips.css';\n\nexport interface ChipsProps {\n  /** 칩의 크기 */\n  size?: 'large' | 'medium';\n  /** 칩의 모양 */\n  type?: 'square' | 'capsule';\n  /** 칩의 상태 */\n  state?: 'hover' | 'selected' | 'disabled' | 'resting';\n  /** 아이콘 위치 */\n  iconPosition?: 'leading' | 'trailing';\n  /** 아이콘 요소 */\n  icon?: React.ReactNode;\n  /** 아이콘 색상 */\n  iconColor?: string;\n  /** 텍스트 내용 */\n  children?: React.ReactNode;\n  /** 클릭 이벤트 핸들러 */\n  onClick?: () => void;\n  /** 추가 CSS 클래스 */\n  className?: string;\n}\n\nexport const Chips: React.FC<ChipsProps> = ({\n  size = 'medium',\n  type = 'capsule',\n  state = 'resting',\n  iconPosition = 'leading',\n  icon,\n  iconColor,\n  children,\n  onClick,\n  className = '',\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Size configurations\n  const sizeConfig = {\n    large: {\n      paddingX: '16px',\n      paddingY: '9px',\n      borderRadius: type === 'capsule' ? '100px' : '8px',\n      height: '40px',\n      gap: '4px',\n    },\n    medium: {\n      paddingX: '12px',\n      paddingY: '6px',\n      borderRadius: type === 'capsule' ? '100px' : '6px',\n      height: '32px',\n      gap: '4px',\n    },\n  };\n\n  const getStyles = (): React.CSSProperties => {\n    const config = sizeConfig[size];\n\n    let styles: React.CSSProperties = {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: `${config.paddingY} ${config.paddingX}`,\n      borderRadius: config.borderRadius,\n      height: config.height,\n      border: '1px solid transparent',\n      cursor: state === 'disabled' ? 'not-allowed' : 'pointer',\n      transition: 'all 0.2s ease',\n      gap: config.gap,\n      whiteSpace: 'nowrap',\n    };\n\n    // State에 따른 스타일링\n    switch (state) {\n      case 'selected':\n        if (type === 'square') {\n          styles = {\n            ...styles,\n            backgroundColor: colors.primary.gray.white,\n            border: `1px solid ${colors.primary.mainviolet}`,\n          };\n        } else {\n          styles = {\n            ...styles,\n            backgroundColor: colors.primary.mainviolet,\n            border: `1px solid ${colors.primary.mainviolet}`,\n          };\n        }\n        break;\n\n      case 'hover':\n        styles = {\n          ...styles,\n          backgroundColor: colors.primary.coolGray[50],\n          border: `1px solid ${colors.primary.coolGray[200]}`,\n        };\n        break;\n\n      case 'disabled':\n        styles = {\n          ...styles,\n          backgroundColor: colors.semantic.disabled.background,\n          border: `1px solid ${colors.semantic.disabled.background}`,\n          cursor: 'not-allowed',\n        };\n        break;\n\n      case 'resting':\n      default:\n        if (isHovered) {\n          styles = {\n            ...styles,\n            backgroundColor: colors.primary.coolGray[50],\n            border: `1px solid ${colors.primary.coolGray[200]}`,\n          };\n        } else {\n          styles = {\n            ...styles,\n            backgroundColor: colors.primary.gray.white,\n            border: `1px solid ${colors.semantic.border.default}`,\n          };\n        }\n        break;\n    }\n\n    return styles;\n  };\n\n  const getTextColor = () => {\n    switch (state) {\n      case 'selected':\n        if (type === 'square') {\n          return colors.primary.coolGray[800];\n        }\n        return colors.primary.gray.white;\n      case 'disabled':\n        return colors.semantic.disabled.foreground;\n      default:\n        return colors.primary.coolGray[800];\n    }\n  };\n\n  const getIconColor = () => {\n    if (iconColor) {\n      return iconColor;\n    }\n\n    switch (state) {\n      case 'selected':\n        if (type === 'square') {\n          return colors.primary.mainviolet;\n        }\n        return colors.primary.gray.white;\n      case 'disabled':\n        return colors.semantic.disabled.foreground;\n      default:\n        return colors.primary.coolGray[800];\n    }\n  };\n\n  const handleClick = () => {\n    if (state !== 'disabled' && onClick) {\n      onClick();\n    }\n  };\n\n  const handleMouseEnter = () => {\n    if (state === 'resting') {\n      setIsHovered(true);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n  };\n\n  const renderContent = () => {\n    if (!icon) {\n      return (\n        <Font type=\"body2\" fontWeight=\"medium\" color={getTextColor()}>\n          {children}\n        </Font>\n      );\n    }\n\n    if (iconPosition === 'leading') {\n      return (\n        <>\n          <span className=\"chips-icon\" style={{ color: getIconColor() }}>\n            {icon}\n          </span>\n          {children && (\n            <Font type=\"body2\" fontWeight=\"medium\" color={getTextColor()}>\n              {children}\n            </Font>\n          )}\n        </>\n      );\n    } else {\n      return (\n        <>\n          {children && (\n            <Font type=\"body2\" fontWeight=\"medium\" color={getTextColor()}>\n              {children}\n            </Font>\n          )}\n          <span className=\"chips-icon\" style={{ color: getIconColor() }}>\n            {icon}\n          </span>\n        </>\n      );\n    }\n  };\n\n  return (\n    <button\n      className={`chips chips--${size} chips--${type} chips--${state} ${className}`}\n      style={getStyles()}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      disabled={state === 'disabled'}\n      type=\"button\"\n    >\n      {renderContent()}\n    </button>\n  );\n};\n"]}