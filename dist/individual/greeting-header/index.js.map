{"version":3,"sources":["../../../src/tokens/colors.ts","../../../src/tokens/typography.ts","../../../src/tokens/spacing.ts","../../../src/tokens/radius.ts","../../../src/components/greeting-header/GreetingHeader.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAMO,IAAM,MAAS,GAAA;AAAA,EACpB,OAAS,EAAA;AAAA,IAEK;AAAA,IAGZ,IAAM,EAAA;AAAA,MAEJ,GAAK,EAAA,SAUP,CAqEF,CAAA;AAAA;AAAA,EAGA,QAAU,EAAA;AAAA,IAuBR,UAAY,EAAA;AAAA;AAAA,MAEV,OAAS,EAAA,SAGX,CAiBF,CAiCF,CAAA;;;ACxKO,IAAM,UAAa,GAAA;AAAA;AAAA,EAExB,OAAS,EAAA;AACX,CAAA;AAGO,IAAM,QAAW,GAAA;AAAA,EACtB,KAAO,EAAA,MAAA;AAAA,EAGH;AAAA,EACJ,CAAG,EAAA,UAAA;AAAA,EACA;AAAA,EACH,CAAG,EAAA,UAAA;AAAA;AAAA,EACH,EAAI,EAAA,SAGN,CAAA;AAGO,IAAM,UAAa,GAAA;AAAA,EACxB,IAAM,EAAA,GAAA;AAAA,EACN,QAAU,EAAA,GAAA;AAAA,EAEV,OAAS,EAAA;AACX,CAAA;AAGO,IAAM,UAAa,GAAA;AAAA,EACxB,KAAO,EAAA,MAAA;AAAA,EAIP,CAAG,EAAA,MAAA;AAAA,EAEH,CAAG,EAAA,MAAA;AAAA,EACH,EAAI,EAAA,MAGN,CAAA;AAGO,IAAM,aAAgB,GAAA;AAAA,EAC3B,CAAG,EAAA,GAGL,CAAA;AAGO,IAAM,UAAa,GAAA;AAAA;AAAA,EAExB,QAAU,EAAA;AAAA,IACR,UAAU,QAAS,CAAA,KAAA;AAAA,IACnB,YAAY,UAAW,CAAA,IAAA;AAAA,IACvB,YAAY,UAAW,CAAA,KAAA;AAAA,IACvB,eAAe,aAAc,CAAA,CAAA;AAAA,IAC7B,YAAY,UAAW,CAAA;AAAA,GACzB;AAAA,EAwBA;AAAA,EAEA,QAAU,EAAA;AAAA,IACR,UAAU,QAAS,CAAA,CAAA;AAAA,IACnB,YAAY,UAAW,CAAA,QAAA;AAAA,IACvB,YAAY,UAAW,CAAA,CAAA;AAAA,IACvB,eAAe,aAAc,CAAA,CAAA;AAAA,IAC7B,YAAY,UAAW,CAAA;AAAA,GACzB;AAAA,EAwBA;AAAA,EAEA,KAAO,EAAA;AAAA,IACL,UAAU,QAAS,CAAA,CAAA;AAAA,IACnB,YAAY,UAAW,CAAA,OAAA;AAAA,IACvB,YAAY,UAAW,CAAA,CAAA;AAAA,IACvB,eAAe,aAAc,CAAA,CAAA;AAAA,IAC7B,YAAY,UAAW,CAAA;AAAA,GACzB;AAAA,EAQA;AAAA,EAEA,OAAS,EAAA;AAAA,IACP,UAAU,QAAS,CAAA,EAAA;AAAA,IACnB,YAAY,UAAW,CAAA,OAAA;AAAA,IACvB,YAAY,UAAW,CAAA,EAAA;AAAA,IACvB,eAAe,aAAc,CAAA,CAAA;AAAA,IAC7B,YAAY,UAAW,CAAA;AAAA;AAE3B,CAAA;;;AC1IO,IAAM,OAAU,GAAA;AAAA;AAAA,EAErB,IAAM,EAAA,KAAA;AAAA,EAED;AAAA,EAEL,EAAI,EAAA,KAAA;AAAA;AAAA,EAEJ,CAAG,EAAA,MAAA;AAAA;AAAA,EAEH,CAAG,EAAA,MAAA;AAAA;AAAA,EAEH,CAAG,EAAA,MAOL,CAAA;;;ACpBO,IAAM,MAAS,GAAA;AAAA,EAMjB;AAAA,EAEH,CAAG,EAAA,MAKL,CAAA;ACOA,IAAM,iBAAgD,CAAC;AAAA,EACrD,QAAW,GAAA,cAAA;AAAA,EACX,cAAA;AAAA,EACA,QAAW,GAAA,IAAA;AAAA,EACX,OAAA;AAAA,EACA,OAAA;AAAA,EACA,SAAY,GAAA;AACd,CAAM,KAAA;AACJ,EAAA,MAAM,CAAC,WAAa,EAAA,cAAc,IAAI,QAAS,iBAAA,IAAI,MAAM,CAAA;AAEzD,EAAA,SAAA,CAAU,MAAM;AACd,IAAM,MAAA,KAAA,GAAQ,YAAY,MAAM;AAC9B,MAAe,cAAA,iBAAA,IAAI,MAAM,CAAA;AAAA,OACxB,GAAK,CAAA;AAER,IAAO,OAAA,MAAM,cAAc,KAAK,CAAA;AAAA,GAClC,EAAG,EAAE,CAAA;AAGL,EAAA,MAAM,uBAAuB,MAAM;AACjC,IAAM,MAAA,IAAA,GAAO,YAAY,QAAS,EAAA;AAElC,IAAI,IAAA,IAAA,IAAQ,CAAK,IAAA,IAAA,GAAO,EAAI,EAAA;AAC1B,MAAO,OAAA;AAAA,QACL,QAAU,EAAA,8CAAA;AAAA,QACV,KAAO,EAAA,WAAA;AAAA,QACP,UAAY,EAAA,mDAAA;AAAA,QACZ,SAAW,EAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,GAAG;AAAA,OACpC;AAAA,KACS,MAAA,IAAA,IAAA,IAAQ,EAAM,IAAA,IAAA,GAAO,EAAI,EAAA;AAClC,MAAO,OAAA;AAAA,QACL,QAAU,EAAA,8CAAA;AAAA,QACV,KAAO,EAAA,cAAA;AAAA,QACP,UAAY,EAAA,mDAAA;AAAA,QACZ,SAAA,EAAW,MAAO,CAAA,QAAA,CAAS,UAAW,CAAA;AAAA,OACxC;AAAA,KACS,MAAA,IAAA,IAAA,IAAQ,EAAM,IAAA,IAAA,GAAO,EAAI,EAAA;AAClC,MAAO,OAAA;AAAA,QACL,QAAU,EAAA,8CAAA;AAAA,QACV,KAAO,EAAA,WAAA;AAAA,QACP,UAAY,EAAA,mDAAA;AAAA,QACZ,SAAA,EAAW,MAAO,CAAA,QAAA,CAAS,UAAW,CAAA;AAAA,OACxC;AAAA,KACK,MAAA;AACL,MAAO,OAAA;AAAA,QACL,QAAU,EAAA,8CAAA;AAAA,QACV,KAAO,EAAA,WAAA;AAAA,QACP,UAAY,EAAA,mDAAA;AAAA,QACZ,SAAA,EAAW,MAAO,CAAA,QAAA,CAAS,UAAW,CAAA;AAAA,OACxC;AAAA;AACF,GACF;AAGA,EAAA,MAAM,iBAAiB,MAAM;AAC3B,IAAA,IAAI,CAAC,OAAA,IAAW,CAAC,OAAA,CAAQ,WAAkB,OAAA,IAAA;AAE3C,IAAA,MAAM,YAAe,GAAA;AAAA,MACnB,KAAO,EAAA,cAAA;AAAA,MACP,MAAQ,EAAA,cAAA;AAAA,MACR,KAAO,EAAA,iBAAA;AAAA,MACP,KAAO,EAAA;AAAA,KACT;AAEA,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,YAAA,CAAa,OAAQ,CAAA,SAAS,CAAK,IAAA,iBAAA;AAAA,MACzC,MAAM,OAAQ,CAAA;AAAA,KAChB;AAAA,GACF;AAEA,EAAA,MAAM,eAAe,oBAAqB,EAAA;AAC1C,EAAA,MAAM,cAAc,cAAe,EAAA;AACnC,EAAM,MAAA,eAAA,GAAkB,kBAAkB,YAAa,CAAA,QAAA;AAGvD,EAAA,MAAM,aAAa,MAAM;AACvB,IAAM,MAAA,IAAA,GAAO,CAAC,QAAK,EAAA,QAAA,EAAK,UAAK,QAAK,EAAA,QAAA,EAAK,UAAK,QAAG,CAAA;AAC/C,IAAM,MAAA,KAAA,GAAQ,WAAY,CAAA,QAAA,EAAa,GAAA,CAAA;AACvC,IAAM,MAAA,IAAA,GAAO,YAAY,OAAQ,EAAA;AACjC,IAAA,MAAM,GAAM,GAAA,IAAA,CAAK,WAAY,CAAA,MAAA,EAAQ,CAAA;AAErC,IAAA,OAAO,CAAG,EAAA,KAAK,CAAK,OAAA,EAAA,IAAI,WAAM,GAAG,CAAA,CAAA,CAAA;AAAA,GACnC;AAEA,EAAA,MAAM,YAAoC,GAAA;AAAA,IACxC,YAAY,YAAa,CAAA,UAAA;AAAA,IACzB,SAAS,OAAQ,CAAA,CAAA;AAAA,IACjB,cAAc,MAAO,CAAA,CAAA;AAAA,IACrB,QAAU,EAAA,UAAA;AAAA,IACV,QAAU,EAAA,QAAA;AAAA,IACV,MAAA,EAAQ,UAAU,SAAY,GAAA,SAAA;AAAA,IAC9B,UAAY,EAAA,eAAA;AAAA,IACZ,SAAW,EAAA,OAAA;AAAA,IACX,OAAS,EAAA,MAAA;AAAA,IACT,aAAe,EAAA,QAAA;AAAA,IACf,cAAgB,EAAA;AAAA,GAClB;AAEA,EACE,uBAAA,IAAA,CAAC,SAAI,SAAW,EAAA,CAAA,gBAAA,EAAmB,SAAS,CAAI,CAAA,EAAA,KAAA,EAAO,cAAc,OAEnE,EAAA,QAAA,EAAA;AAAA,oBAAA,GAAA;AAAA,MAAC,KAAA;AAAA,MAAA;AAAA,QACC,KAAO,EAAA;AAAA,UACL,QAAU,EAAA,UAAA;AAAA,UACV,GAAK,EAAA,CAAA;AAAA,UACL,KAAO,EAAA,CAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,MAAQ,EAAA,OAAA;AAAA,UACR,UAAY,EAAA,CAAA,mEAAA,CAAA;AAAA,UACZ,cAAgB,EAAA,WAAA;AAAA,UAChB,OAAS,EAAA,GAAA;AAAA,UACT,aAAe,EAAA;AAAA;AACjB;AAAA,KACF;AAAA,oBAGA,IAAA,CAAC,SAAI,KAAO,EAAA,EAAE,UAAU,UAAY,EAAA,MAAA,EAAQ,GAC1C,EAAA,QAAA,EAAA;AAAA,sBAAC,IAAA,CAAA,KAAA,EAAA,EAAI,KAAO,EAAA,EAAE,OAAS,EAAA,MAAA,EAAQ,YAAY,QAAU,EAAA,YAAA,EAAc,OAAQ,CAAA,CAAA,EACzE,EAAA,QAAA,EAAA;AAAA,wBAAC,GAAA,CAAA,MAAA,EAAA,EAAK,KAAO,EAAA,EAAE,QAAU,EAAA,MAAA,EAAQ,aAAa,OAAQ,CAAA,CAAA,EAAM,EAAA,QAAA,EAAA,YAAA,CAAa,KAAM,EAAA,CAAA;AAAA,6BAC9E,KACC,EAAA,EAAA,QAAA,EAAA;AAAA,0BAAA,GAAA;AAAA,YAAC,IAAA;AAAA,YAAA;AAAA,cACC,KAAA,EAAO,aACF,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA,CAAW,QADT,CAAA,EAAA;AAAA,gBAEL,OAAO,YAAa,CAAA,SAAA;AAAA,gBACpB,MAAQ,EAAA,CAAA;AAAA,gBACR,cAAc,OAAQ,CAAA,IAAA;AAAA,gBACtB,UAAY,EAAA;AAAA,eACd,CAAA;AAAA,cAEC,QAAA,EAAA;AAAA;AAAA,WACH;AAAA,0BACA,IAAA;AAAA,YAAC,GAAA;AAAA,YAAA;AAAA,cACC,KAAA,EAAO,aACF,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA,CAAW,QADT,CAAA,EAAA;AAAA,gBAEL,OAAO,YAAa,CAAA,SAAA;AAAA,gBACpB,MAAQ,EAAA,CAAA;AAAA,gBACR,OAAS,EAAA;AAAA,eACX,CAAA;AAAA,cAEC,QAAA,EAAA;AAAA,gBAAA,QAAA;AAAA,gBAAS;AAAA;AAAA;AAAA;AACZ,SACF,EAAA;AAAA,OACF,EAAA,CAAA;AAAA,sBAGA,IAAA;AAAA,QAAC,KAAA;AAAA,QAAA;AAAA,UACC,KAAO,EAAA;AAAA,YACL,OAAS,EAAA,MAAA;AAAA,YACT,cAAgB,EAAA,eAAA;AAAA,YAChB,UAAY,EAAA,QAAA;AAAA,YACZ,WAAW,OAAQ,CAAA;AAAA,WACrB;AAAA,UAGC,QAAA,EAAA;AAAA,YACC,QAAA,oBAAA,IAAA,CAAC,KAAI,EAAA,EAAA,KAAA,EAAO,EAAE,OAAA,EAAS,MAAQ,EAAA,UAAA,EAAY,QAAU,EAAA,GAAA,EAAK,OAAQ,CAAA,EAAA,EAChE,EAAA,QAAA,EAAA;AAAA,8BAAA,GAAA,CAAC,UAAK,KAAO,EAAA,EAAE,QAAU,EAAA,MAAA,IAAU,QAAE,EAAA,WAAA,EAAA,CAAA;AAAA,8BACrC,GAAA;AAAA,gBAAC,MAAA;AAAA,gBAAA;AAAA,kBACC,KAAA,EAAO,aACF,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA,CAAW,KADT,CAAA,EAAA;AAAA,oBAEL,OAAO,YAAa,CAAA,SAAA;AAAA,oBACpB,OAAS,EAAA;AAAA,mBACX,CAAA;AAAA,kBAEC,QAAW,EAAA,UAAA;AAAA;AAAA;AACd,aACF,EAAA,CAAA;AAAA,YAID,WACC,oBAAA,IAAA,CAAC,KAAI,EAAA,EAAA,KAAA,EAAO,EAAE,OAAA,EAAS,MAAQ,EAAA,UAAA,EAAY,QAAU,EAAA,GAAA,EAAK,OAAQ,CAAA,EAAA,EAChE,EAAA,QAAA,EAAA;AAAA,8BAAA,GAAA,CAAC,UAAK,KAAO,EAAA,EAAE,UAAU,MAAO,EAAA,EAAI,sBAAY,IAAK,EAAA,CAAA;AAAA,cACpD,YAAY,IACX,oBAAA,IAAA;AAAA,gBAAC,MAAA;AAAA,gBAAA;AAAA,kBACC,KAAA,EAAO,aACF,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA,CAAW,KADT,CAAA,EAAA;AAAA,oBAEL,OAAO,YAAa,CAAA,SAAA;AAAA,oBACpB,OAAS,EAAA;AAAA,mBACX,CAAA;AAAA,kBAEC,QAAA,EAAA;AAAA,oBAAY,WAAA,CAAA,IAAA;AAAA,oBAAK;AAAA;AAAA;AAAA;AACpB,aAEJ,EAAA;AAAA;AAAA;AAAA;AAEJ,KACF,EAAA,CAAA;AAAA,oBAGA,GAAA;AAAA,MAAC,KAAA;AAAA,MAAA;AAAA,QACC,KAAO,EAAA;AAAA,UACL,QAAU,EAAA,UAAA;AAAA,UACV,QAAQ,OAAQ,CAAA,CAAA;AAAA,UAChB,OAAO,OAAQ,CAAA,CAAA;AAAA,UACf,OAAS,EAAA;AAAA,SACX;AAAA,QAEA,QAAA,kBAAA,GAAA;AAAA,UAAC,MAAA;AAAA,UAAA;AAAA,YACC,KAAA,EAAO,aACF,CAAA,cAAA,CAAA,EAAA,EAAA,UAAA,CAAW,OADT,CAAA,EAAA;AAAA,cAEL,OAAO,YAAa,CAAA,SAAA;AAAA,cACpB,SAAW,EAAA;AAAA,aACb,CAAA;AAAA,YAEC,QAAuB,EAAA,sBAAA;AAAA;AAAA;AAC1B;AAAA;AACF,GACF,EAAA,CAAA;AAEJ,CAAA;AAGA,IAAM,yBAAyB,MAAc;AAC3C,EAAA,MAAM,QAAW,GAAA;AAAA,IACf,kDAAA;AAAA,IACA,gFAAA;AAAA,IACA,+DAAA;AAAA,IACA,6DAAA;AAAA,IACA,0DAAA;AAAA,IACA,0DAAA;AAAA,IACA;AAAA,GACF;AAEA,EAAO,OAAA,QAAA,CAAS,KAAK,KAAM,CAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAS,MAAM,CAAC,CAAA;AAC7D,CAAA;AAEA,IAAO,sBAAQ,GAAA","file":"index.js","sourcesContent":["/**\n * Color Design Tokens\n * 브랜드 아이덴티티와 UI 의미 전달을 위한 컬러 시스템\n */\n\n// All colors export\nexport const colors = {\n  primary: {\n    /** 브랜드 아이덴티티를 대표하는 메인 컬러 */\n    mainviolet: '#7248D9',\n\n    /** 중립적인 컬러 - Typography 및 넓은 영역 Fill에 사용 */\n    gray: {\n      900: '#171717',\n      800: '#292929',\n      700: '#595959',\n      600: '#7A7A7A',\n      500: '#999999',\n      400: '#B8B8B8',\n      300: '#D6D6D6',\n      200: '#EBEBEB',\n      100: '#F5F5F5',\n      black: '#000000',\n      white: '#FFFFFF',\n    },\n\n    /** 넓은 영역에서 Fill로 사용 가능한 중립 색상 계열 */\n    coolGray: {\n      900: '#151719',\n      800: '#25282D',\n      700: '#393F46',\n      600: '#505862',\n      500: '#6E7887',\n      400: '#8D97A5',\n      300: '#AFB6C0',\n      200: '#D1D5DB',\n      100: '#E8EAED',\n      50: '#F3F5F6',\n    },\n\n    /** 메인 컬러보다는 덜 강조되지만, 일러스트 및 보조 정보 강조에 사용 */\n    tint: {\n      violet: {\n        700: '#4B1FA3',\n        600: '#5B27C4',\n        500: '#7248D9',\n        400: '#8B6EE4',\n        300: '#A88FEA',\n        200: '#C8B7F4',\n        100: '#E5DEF9',\n        50: '#F8F4FE',\n      },\n      blue: {\n        700: '#0038B8',\n        600: '#004AF5',\n        500: '#2F6EFF',\n        400: '#5C92FF',\n        300: '#8FB4FF',\n        200: '#C2D6FF',\n        100: '#E0EBFF',\n        50: '#F0F5FF',\n      },\n      red: {\n        700: '#C70000',\n        600: '#E51A1A',\n        500: '#FF2E2E',\n        400: '#FF6666',\n        300: '#FF9494',\n        200: '#FFC2C2',\n        100: '#FFE0E0',\n        50: '#FFF0F0',\n      },\n      yellow: {\n        700: '#F59B00',\n        600: '#FFB200',\n        500: '#FFCC00',\n        400: '#FFDA47',\n        300: '#FFE785',\n        200: '#FFF1B8',\n        100: '#FFF7D6',\n        50: '#FFFAE5',\n      },\n      green: {\n        700: '#00996B',\n        600: '#00AD74',\n        500: '#00C785',\n        400: '#55DD99',\n        300: '#88E7B8',\n        200: '#BBF2D2',\n        100: '#DDF8E6',\n        50: '#F0FFF5',\n      },\n    },\n  },\n\n  /** 텍스트, 상태, 배경, 보더, 비활성, Dim 등 UI 의미 전달용 컬러셋 */\n  semantic: {\n    text: {\n      /** 콘텐츠에서 가장 중요한 정보를 전달할 때 사용 */\n      primary: '#25282D',\n      /** 주요 정보 외의 부가적인 내용을 전달할 때 사용 */\n      secondary: '#505862',\n      /** 시각적 우선순위가 낮은 텍스트에 사용 */\n      tertiary: '#8D97A5',\n      /** 상호작용이 불가능하거나 비활성화된 상태의 텍스트에 사용 */\n      disabled: '#D1D5DB',\n      /** 어두운 배경 위에 사용되는 밝은 텍스트 컬러 */\n      inverse: '#FFFFFF',\n    },\n    state: {\n      /** 작업 완료, 저장 성공 등 긍정적인 상태를 나타냄 */\n      success: '#00C785',\n      /** 주의가 필요한 상황이나 경고 메시지를 전달할 때 사용 */\n      warning: '#FFCC00',\n      /** 오류 상태나 실패 메시지를 표시할 때 사용 */\n      error: '#FF2E2E',\n      /** 보조적인 정보나 안내 메시지를 전달할 때 사용 */\n      info: '#2F6EFF',\n    },\n    background: {\n      /** 기본 페이지 또는 레이아웃의 배경으로 사용 */\n      primary: '#FFFFFF',\n      /** Primary 배경과 대비를 주어 시각적 계층을 형성할 때 사용 */\n      secondary: '#E8EAED',\n    },\n    border: {\n      /** 강조보다는 미묘한 구분을 목적으로 하며, 디바이더 역할까지 겸함 */\n      default: '#EBEBEB',\n      /** 콘텐츠 간의 명확한 구획이 필요할 때 사용하는 보더 컬러 */\n      strong: '#D6D6D6',\n    },\n    disabled: {\n      /** 텍스트 또는 아이콘이 비활성 상태임을 나타낼 때 사용 */\n      foreground: '#D1D5DB',\n      /** 버튼, 입력 필드 등 UI가 비활성화된 배경으로 사용 */\n      background: '#F3F5F6',\n    },\n    dim: {\n      /** 모달, 드롭다운 등 레이어 위에 표시되는 오버레이 배경 */\n      overlay: '#000000B3',\n    },\n  },\n\n  /** 의료 플랫폼 특성을 반영해 피부, 머리카락, 장기 표현용 컬러 */\n  illustration: {\n    skin: {\n      /** 피부 표현 시 밝은 톤으로 사용 */\n      light: '#FFEBE1',\n      /** 피부 기본 톤을 표현할 때 사용 */\n      base: '#FFDAC4',\n      /** 피부 음영 표현용 컬러 */\n      shadow: '#FFCBB7',\n      /** 피부 깊은 음영이나 입체감을 줄 때 사용 */\n      deepshadow: '#F8B29C',\n    },\n    hair: {\n      /** 머리카락 하이라이트 표현용 컬러 */\n      light: '#706965',\n      /** 머리카락 기본 색상을 표현할 때 사용 */\n      base: '#37322F',\n      /** 머리카락 음영 및 입체감 표현용 컬러 */\n      shadow: '#1A1716',\n    },\n    organ: {\n      /** 긍정적 상태나 특정 장기 강조용 컬러 */\n      light: '#FFB5B5',\n      /** 장기 표현 시 기본 색상으로 사용 */\n      base: '#FF8F8F',\n      /** 장기 음영 표현용 컬러 */\n      shadow: '#FB7474',\n      /** 장기 깊은 음영이나 강조를 위해 사용 */\n      deepshadow: '#CD5151',\n    },\n  },\n} as const;\n\n// Type definitions\nexport type ColorTokens = typeof colors;\nexport type PrimaryColors = typeof colors.primary;\nexport type SemanticColors = typeof colors.semantic;\nexport type IllustrationColors = typeof colors.illustration;\n\n// 하위 호환성을 위한 개별 export (deprecated)\n/** @deprecated colors.primary 사용을 권장합니다 */\nexport const primary = colors.primary.mainviolet;\n\n/** @deprecated colors.primary.gray 사용을 권장합니다 */\nexport const gray = colors.primary.gray;\n\n/** @deprecated colors.primary.coolGray 사용을 권장합니다 */\nexport const coolGray = colors.primary.coolGray;\n\n/** @deprecated colors.primary.tint 사용을 권장합니다 */\nexport const tint = colors.primary.tint;\n\n/** @deprecated colors.semantic 사용을 권장합니다 */\nexport const semantic = colors.semantic;\n\n/** @deprecated colors.illustration 사용을 권장합니다 */\nexport const illustration = colors.illustration;\n","/**\n * Typography Design Tokens\n * 서비스와 사용자가 커뮤니케이션하는 주요 요소\n */\n\n// Font Family\nexport const fontFamily = {\n  /** 웹사이트에 사용되는 모든 폰트는 Pretendard를 기반으로 함 */\n  primary: 'Pretendard',\n} as const;\n\n// Font Sizes (rem 단위로 반응형 지원)\nexport const fontSize = {\n  xxxxl: '2rem', // 32px\n  xxxl: '1.75rem', // 28px\n  xxl: '1.5rem', // 24px\n  xl: '1.25rem', // 20px\n  l: '1.125rem', // 18px\n  m: '1rem', // 16px\n  s: '0.875rem', // 14px\n  xs: '0.75rem', // 12px\n  xxs: '0.625rem', // 10px\n  xxxs: '0.688rem', // 11px\n} as const;\n\n// Font Weights\nexport const fontWeight = {\n  bold: 700,\n  semibold: 600,\n  medium: 500,\n  regular: 400,\n} as const;\n\n// Line Heights\nexport const lineHeight = {\n  xxxxl: '42px',\n  xxxl: '36px',\n  xxl: '32px',\n  xl: '28px',\n  l: '24px',\n  m: '24px',\n  s: '22px',\n  xs: '20px',\n  xxs: '18px',\n  xxxs: '17px',\n} as const;\n\n// Letter Spacings\nexport const letterSpacing = {\n  m: '0',\n  s: '-1%',\n  xs: '-2%',\n} as const;\n\n// Text Styles (React.CSSProperties 호환)\nexport const textStyles = {\n  /** 주목도를 높이고 큰 타이틀 영역 강조에 사용 */\n  display1: {\n    fontSize: fontSize.xxxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 중간 크기 타이틀에 사용 */\n  display2: {\n    fontSize: fontSize.xxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 정보성 카드 타이틀에 주로 사용 */\n  heading1: {\n    fontSize: fontSize.xxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 섹션 구분 타이틀 등에 사용 */\n  heading2: {\n    fontSize: fontSize.xl,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.xl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 소제목 등에 사용 */\n  heading3: {\n    fontSize: fontSize.l,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 리스트 아이템, 버튼 텍스트 등에 사용 */\n  heading4: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.m,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 부가 정보, 캡션 등에 사용 */\n  heading5: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 주요 본문 텍스트에 사용 */\n  body1: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 본문 텍스트에 사용 */\n  body2: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 본문 보조, 하위 위계 텍스트 쓰임새로 사용 권장 */\n  body3: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xxs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 정보나 컴포넌트 레벨에서 사용 */\n  caption: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n} as const;\n\n// All typography export\nexport const typography = {\n  fontFamily,\n  fontSize,\n  fontWeight,\n  lineHeight,\n  letterSpacing,\n  textStyles,\n} as const;\n\nexport default typography;\n","/**\n * Spacing Design Tokens\n * 균일한 요소와 간격을 사용하여 UI의 체계적인 배열을 도와줌\n * 4와 8의 배수에 기반한 스페이싱 시스템\n */\n\nexport const spacing = {\n  /** 2px - 최소 간격 */\n  xxxs: '2px',\n  /** 4px - 매우 작은 간격 */\n  xxs: '4px',\n  /** 8px - 작은 간격 */\n  xs: '8px',\n  /** 12px - 작은-중간 간격 */\n  s: '12px',\n  /** 16px - 기본 간격 */\n  m: '16px',\n  /** 20px - 중간-큰 간격 */\n  l: '20px',\n  /** 24px - 큰 간격 */\n  xl: '24px',\n  /** 32px - 매우 큰 간격 */\n  xxl: '32px',\n  /** 40px - 최대 간격 */\n  xxxl: '40px',\n} as const;\n\nexport type SpacingTokens = typeof spacing;\n\nexport default spacing;\n","/**\n * Radius Design Tokens\n * UI 요소의 모서리를 둥글게 하여 부드러운 사용자 경험을 제공\n */\n\nexport const radius = {\n  /** 작은 버튼, 입력 필드, 체크박스에 최소한의 둥근 효과를 줄 때 사용 */\n  xs: '4px',\n  /** 카드, 드롭다운, 배너, 일반 버튼에 기본적인 둥근 스타일을 적용할 때 사용 */\n  s: '8px',\n  /** 중간 크기의 카드, 팝업, 모달에 부드러운 곡률을 적용할 때 사용 */\n  m: '12px',\n  /** 큰 모달, 프로필 이미지, 강조 영역에 둥근 효과를 줄 때 사용 */\n  l: '16px',\n  /** Hero Section과 같은 대형 UI 요소에 강한 둥근 효과를 적용할 때 사용 */\n  xl: '20px',\n  /** 아바타, 토글 버튼과 같은 완전한 원형 요소에 적용할 때 사용 */\n  full: '50%',\n} as const;\n\nexport type RadiusTokens = typeof radius;\n\nexport default radius;\n","import React, { useState, useEffect } from 'react';\nimport { colors } from '../../tokens/colors';\nimport { textStyles } from '../../tokens/typography';\nimport { spacing } from '../../tokens/spacing';\nimport { radius } from '../../tokens/radius';\nimport './GreetingHeader.css';\n\nexport interface GreetingHeaderProps {\n  /** 사용자 이름 */\n  userName?: string;\n  /** 커스텀 인사말 (제공되면 기본 인사말 대신 사용) */\n  customGreeting?: string;\n  /** 날짜 표시 여부 */\n  showDate?: boolean;\n  /** 날씨 정보 */\n  weather?: {\n    temperature?: number;\n    condition?: 'sunny' | 'cloudy' | 'rainy' | 'snowy';\n  };\n  /** 클릭 핸들러 */\n  onClick?: () => void;\n  /** 추가 CSS 클래스 */\n  className?: string;\n}\n\nconst GreetingHeader: React.FC<GreetingHeaderProps> = ({\n  userName = '익명',\n  customGreeting,\n  showDate = true,\n  weather,\n  onClick,\n  className = '',\n}) => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000); // 1분마다 업데이트\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // 시간대별 인사말 생성\n  const getTimeBasedGreeting = () => {\n    const hour = currentTime.getHours();\n\n    if (hour >= 5 && hour < 12) {\n      return {\n        greeting: '좋은 아침이에요!',\n        emoji: '🌅',\n        bgGradient: 'linear-gradient(135deg, #FFE5B4 0%, #FFD700 100%)',\n        textColor: colors.primary.gray[800],\n      };\n    } else if (hour >= 12 && hour < 18) {\n      return {\n        greeting: '활기찬 오후네요!',\n        emoji: '☀️',\n        bgGradient: 'linear-gradient(135deg, #87CEEB 0%, #4FC3F7 100%)',\n        textColor: colors.semantic.background.primary,\n      };\n    } else if (hour >= 18 && hour < 22) {\n      return {\n        greeting: '좋은 저녁이에요!',\n        emoji: '🌇',\n        bgGradient: 'linear-gradient(135deg, #FF9A56 0%, #FF6B35 100%)',\n        textColor: colors.semantic.background.primary,\n      };\n    } else {\n      return {\n        greeting: '늦은 시간이네요!',\n        emoji: '🌙',\n        bgGradient: 'linear-gradient(135deg, #2C3E50 0%, #4A6741 100%)',\n        textColor: colors.semantic.background.primary,\n      };\n    }\n  };\n\n  // 날씨 아이콘 및 정보\n  const getWeatherInfo = () => {\n    if (!weather || !weather.condition) return null;\n\n    const weatherIcons = {\n      sunny: '☀️',\n      cloudy: '☁️',\n      rainy: '🌧️',\n      snowy: '❄️',\n    };\n\n    return {\n      icon: weatherIcons[weather.condition] || '🌤️',\n      temp: weather.temperature,\n    };\n  };\n\n  const timeGreeting = getTimeBasedGreeting();\n  const weatherInfo = getWeatherInfo();\n  const displayGreeting = customGreeting || timeGreeting.greeting;\n\n  // 요일 및 날짜 포맷팅\n  const formatDate = () => {\n    const days = ['일', '월', '화', '수', '목', '금', '토'];\n    const month = currentTime.getMonth() + 1;\n    const date = currentTime.getDate();\n    const day = days[currentTime.getDay()];\n\n    return `${month}월 ${date}일 (${day})`;\n  };\n\n  const headerStyles: React.CSSProperties = {\n    background: timeGreeting.bgGradient,\n    padding: spacing.l,\n    borderRadius: radius.l,\n    position: 'relative',\n    overflow: 'hidden',\n    cursor: onClick ? 'pointer' : 'default',\n    transition: 'all 0.3s ease',\n    minHeight: '120px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  };\n\n  return (\n    <div className={`greeting-header ${className}`} style={headerStyles} onClick={onClick}>\n      {/* 배경 장식 패턴 */}\n      <div\n        style={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          width: '150px',\n          height: '150px',\n          background: `radial-gradient(circle, rgba(255,255,255,0.1) 1px, transparent 1px)`,\n          backgroundSize: '15px 15px',\n          opacity: 0.6,\n          pointerEvents: 'none',\n        }}\n      />\n\n      {/* 메인 인사말 영역 */}\n      <div style={{ position: 'relative', zIndex: 1 }}>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: spacing.s }}>\n          <span style={{ fontSize: '32px', marginRight: spacing.s }}>{timeGreeting.emoji}</span>\n          <div>\n            <h1\n              style={{\n                ...textStyles.display1,\n                color: timeGreeting.textColor,\n                margin: 0,\n                marginBottom: spacing.xxxs,\n                textShadow: '0px 1px 2px rgba(0,0,0,0.1)',\n              }}\n            >\n              {displayGreeting}\n            </h1>\n            <p\n              style={{\n                ...textStyles.heading3,\n                color: timeGreeting.textColor,\n                margin: 0,\n                opacity: 0.9,\n              }}\n            >\n              {userName}님 💪\n            </p>\n          </div>\n        </div>\n\n        {/* 하단 정보 영역 */}\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginTop: spacing.m,\n          }}\n        >\n          {/* 날짜 정보 */}\n          {showDate && (\n            <div style={{ display: 'flex', alignItems: 'center', gap: spacing.xs }}>\n              <span style={{ fontSize: '16px' }}>📅</span>\n              <span\n                style={{\n                  ...textStyles.body2,\n                  color: timeGreeting.textColor,\n                  opacity: 0.8,\n                }}\n              >\n                {formatDate()}\n              </span>\n            </div>\n          )}\n\n          {/* 날씨 정보 */}\n          {weatherInfo && (\n            <div style={{ display: 'flex', alignItems: 'center', gap: spacing.xs }}>\n              <span style={{ fontSize: '16px' }}>{weatherInfo.icon}</span>\n              {weatherInfo.temp && (\n                <span\n                  style={{\n                    ...textStyles.body2,\n                    color: timeGreeting.textColor,\n                    opacity: 0.8,\n                  }}\n                >\n                  {weatherInfo.temp}°C\n                </span>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 동기부여 메시지 (랜덤) */}\n      <div\n        style={{\n          position: 'absolute',\n          bottom: spacing.s,\n          right: spacing.m,\n          opacity: 0.7,\n        }}\n      >\n        <span\n          style={{\n            ...textStyles.caption,\n            color: timeGreeting.textColor,\n            fontStyle: 'italic',\n          }}\n        >\n          {getMotivationalMessage()}\n        </span>\n      </div>\n    </div>\n  );\n};\n\n// 동기부여 메시지 생성 함수\nconst getMotivationalMessage = (): string => {\n  const messages = [\n    '오늘도 화이팅! 💪',\n    '한 걸음씩 나아가요 🚶‍♂️',\n    '건강한 하루 되세요! 🌟',\n    '당신은 할 수 있어요! ✨',\n    '작은 변화, 큰 성장 🌱',\n    '꾸준함이 답입니다 ⭐',\n    '건강이 최고의 투자예요 💎',\n  ];\n\n  return messages[Math.floor(Math.random() * messages.length)];\n};\n\nexport default GreetingHeader;\n"]}