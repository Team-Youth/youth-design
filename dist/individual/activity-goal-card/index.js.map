{"version":3,"sources":["../../../src/tokens/colors.ts","../../../src/tokens/typography.ts","../../../src/tokens/spacing.ts","../../../src/tokens/radius.ts","../../../src/tokens/shadows.ts","../../../src/components/activity-goal-card/ActivityGoalCard.tsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Color Design Tokens\n * 브랜드 아이덴티티와 UI 의미 전달을 위한 컬러 시스템\n */\n\n// All colors export\nexport const colors = {\n  primary: {\n    /** 브랜드 아이덴티티를 대표하는 메인 컬러 */\n    mainviolet: '#7248D9',\n\n    /** 중립적인 컬러 - Typography 및 넓은 영역 Fill에 사용 */\n    gray: {\n      900: '#171717',\n      800: '#292929',\n      700: '#595959',\n      600: '#7A7A7A',\n      500: '#999999',\n      400: '#B8B8B8',\n      300: '#D6D6D6',\n      200: '#EBEBEB',\n      100: '#F5F5F5',\n      black: '#000000',\n      white: '#FFFFFF',\n    },\n\n    /** 넓은 영역에서 Fill로 사용 가능한 중립 색상 계열 */\n    coolGray: {\n      900: '#151719',\n      800: '#25282D',\n      700: '#393F46',\n      600: '#505862',\n      500: '#6E7887',\n      400: '#8D97A5',\n      300: '#AFB6C0',\n      200: '#D1D5DB',\n      100: '#E8EAED',\n      50: '#F3F5F6',\n    },\n\n    /** 메인 컬러보다는 덜 강조되지만, 일러스트 및 보조 정보 강조에 사용 */\n    tint: {\n      violet: {\n        700: '#4B1FA3',\n        600: '#5B27C4',\n        500: '#7248D9',\n        400: '#8B6EE4',\n        300: '#A88FEA',\n        200: '#C8B7F4',\n        100: '#E5DEF9',\n        50: '#F8F4FE',\n      },\n      blue: {\n        700: '#0038B8',\n        600: '#004AF5',\n        500: '#2F6EFF',\n        400: '#5C92FF',\n        300: '#8FB4FF',\n        200: '#C2D6FF',\n        100: '#E0EBFF',\n        50: '#F0F5FF',\n      },\n      red: {\n        700: '#C70000',\n        600: '#E51A1A',\n        500: '#FF2E2E',\n        400: '#FF6666',\n        300: '#FF9494',\n        200: '#FFC2C2',\n        100: '#FFE0E0',\n        50: '#FFF0F0',\n      },\n      yellow: {\n        700: '#F59B00',\n        600: '#FFB200',\n        500: '#FFCC00',\n        400: '#FFDA47',\n        300: '#FFE785',\n        200: '#FFF1B8',\n        100: '#FFF7D6',\n        50: '#FFFAE5',\n      },\n      green: {\n        700: '#00996B',\n        600: '#00AD74',\n        500: '#00C785',\n        400: '#55DD99',\n        300: '#88E7B8',\n        200: '#BBF2D2',\n        100: '#DDF8E6',\n        50: '#F0FFF5',\n      },\n    },\n  },\n\n  /** 텍스트, 상태, 배경, 보더, 비활성, Dim 등 UI 의미 전달용 컬러셋 */\n  semantic: {\n    text: {\n      /** 콘텐츠에서 가장 중요한 정보를 전달할 때 사용 */\n      primary: '#25282D',\n      /** 주요 정보 외의 부가적인 내용을 전달할 때 사용 */\n      secondary: '#505862',\n      /** 시각적 우선순위가 낮은 텍스트에 사용 */\n      tertiary: '#8D97A5',\n      /** 상호작용이 불가능하거나 비활성화된 상태의 텍스트에 사용 */\n      disabled: '#D1D5DB',\n      /** 어두운 배경 위에 사용되는 밝은 텍스트 컬러 */\n      inverse: '#FFFFFF',\n    },\n    state: {\n      /** 작업 완료, 저장 성공 등 긍정적인 상태를 나타냄 */\n      success: '#00C785',\n      /** 주의가 필요한 상황이나 경고 메시지를 전달할 때 사용 */\n      warning: '#FFCC00',\n      /** 오류 상태나 실패 메시지를 표시할 때 사용 */\n      error: '#FF2E2E',\n      /** 보조적인 정보나 안내 메시지를 전달할 때 사용 */\n      info: '#2F6EFF',\n    },\n    background: {\n      /** 기본 페이지 또는 레이아웃의 배경으로 사용 */\n      primary: '#FFFFFF',\n      /** Primary 배경과 대비를 주어 시각적 계층을 형성할 때 사용 */\n      secondary: '#E8EAED',\n    },\n    border: {\n      /** 강조보다는 미묘한 구분을 목적으로 하며, 디바이더 역할까지 겸함 */\n      default: '#EBEBEB',\n      /** 콘텐츠 간의 명확한 구획이 필요할 때 사용하는 보더 컬러 */\n      strong: '#D6D6D6',\n    },\n    disabled: {\n      /** 텍스트 또는 아이콘이 비활성 상태임을 나타낼 때 사용 */\n      foreground: '#D1D5DB',\n      /** 버튼, 입력 필드 등 UI가 비활성화된 배경으로 사용 */\n      background: '#F3F5F6',\n    },\n    dim: {\n      /** 모달, 드롭다운 등 레이어 위에 표시되는 오버레이 배경 */\n      overlay: '#000000B3',\n    },\n  },\n\n  /** 의료 플랫폼 특성을 반영해 피부, 머리카락, 장기 표현용 컬러 */\n  illustration: {\n    skin: {\n      /** 피부 표현 시 밝은 톤으로 사용 */\n      light: '#FFEBE1',\n      /** 피부 기본 톤을 표현할 때 사용 */\n      base: '#FFDAC4',\n      /** 피부 음영 표현용 컬러 */\n      shadow: '#FFCBB7',\n      /** 피부 깊은 음영이나 입체감을 줄 때 사용 */\n      deepshadow: '#F8B29C',\n    },\n    hair: {\n      /** 머리카락 하이라이트 표현용 컬러 */\n      light: '#706965',\n      /** 머리카락 기본 색상을 표현할 때 사용 */\n      base: '#37322F',\n      /** 머리카락 음영 및 입체감 표현용 컬러 */\n      shadow: '#1A1716',\n    },\n    organ: {\n      /** 긍정적 상태나 특정 장기 강조용 컬러 */\n      light: '#FFB5B5',\n      /** 장기 표현 시 기본 색상으로 사용 */\n      base: '#FF8F8F',\n      /** 장기 음영 표현용 컬러 */\n      shadow: '#FB7474',\n      /** 장기 깊은 음영이나 강조를 위해 사용 */\n      deepshadow: '#CD5151',\n    },\n  },\n} as const;\n\n// Type definitions\nexport type ColorTokens = typeof colors;\nexport type PrimaryColors = typeof colors.primary;\nexport type SemanticColors = typeof colors.semantic;\nexport type IllustrationColors = typeof colors.illustration;\n\n// 하위 호환성을 위한 개별 export (deprecated)\n/** @deprecated colors.primary 사용을 권장합니다 */\nexport const primary = colors.primary.mainviolet;\n\n/** @deprecated colors.primary.gray 사용을 권장합니다 */\nexport const gray = colors.primary.gray;\n\n/** @deprecated colors.primary.coolGray 사용을 권장합니다 */\nexport const coolGray = colors.primary.coolGray;\n\n/** @deprecated colors.primary.tint 사용을 권장합니다 */\nexport const tint = colors.primary.tint;\n\n/** @deprecated colors.semantic 사용을 권장합니다 */\nexport const semantic = colors.semantic;\n\n/** @deprecated colors.illustration 사용을 권장합니다 */\nexport const illustration = colors.illustration;\n","/**\n * Typography Design Tokens\n * 서비스와 사용자가 커뮤니케이션하는 주요 요소\n */\n\n// Font Family\nexport const fontFamily = {\n  /** 웹사이트에 사용되는 모든 폰트는 Pretendard를 기반으로 함 */\n  primary: 'Pretendard',\n} as const;\n\n// Font Sizes (rem 단위로 반응형 지원)\nexport const fontSize = {\n  xxxxl: '2rem', // 32px\n  xxxl: '1.75rem', // 28px\n  xxl: '1.5rem', // 24px\n  xl: '1.25rem', // 20px\n  l: '1.125rem', // 18px\n  m: '1rem', // 16px\n  s: '0.875rem', // 14px\n  xs: '0.75rem', // 12px\n  xxs: '0.625rem', // 10px\n  xxxs: '0.688rem', // 11px\n} as const;\n\n// Font Weights\nexport const fontWeight = {\n  bold: 700,\n  semibold: 600,\n  medium: 500,\n  regular: 400,\n} as const;\n\n// Line Heights\nexport const lineHeight = {\n  xxxxl: '42px',\n  xxxl: '36px',\n  xxl: '32px',\n  xl: '28px',\n  l: '24px',\n  m: '24px',\n  s: '22px',\n  xs: '20px',\n  xxs: '18px',\n  xxxs: '17px',\n} as const;\n\n// Letter Spacings\nexport const letterSpacing = {\n  m: '0',\n  s: '-1%',\n  xs: '-2%',\n} as const;\n\n// Text Styles (React.CSSProperties 호환)\nexport const textStyles = {\n  /** 주목도를 높이고 큰 타이틀 영역 강조에 사용 */\n  display1: {\n    fontSize: fontSize.xxxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 중간 크기 타이틀에 사용 */\n  display2: {\n    fontSize: fontSize.xxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 정보성 카드 타이틀에 주로 사용 */\n  heading1: {\n    fontSize: fontSize.xxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 섹션 구분 타이틀 등에 사용 */\n  heading2: {\n    fontSize: fontSize.xl,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.xl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 소제목 등에 사용 */\n  heading3: {\n    fontSize: fontSize.l,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 리스트 아이템, 버튼 텍스트 등에 사용 */\n  heading4: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.m,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 부가 정보, 캡션 등에 사용 */\n  heading5: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 주요 본문 텍스트에 사용 */\n  body1: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 본문 텍스트에 사용 */\n  body2: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 본문 보조, 하위 위계 텍스트 쓰임새로 사용 권장 */\n  body3: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xxs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 정보나 컴포넌트 레벨에서 사용 */\n  caption: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n} as const;\n\n// All typography export\nexport const typography = {\n  fontFamily,\n  fontSize,\n  fontWeight,\n  lineHeight,\n  letterSpacing,\n  textStyles,\n} as const;\n\nexport default typography;\n","/**\n * Spacing Design Tokens\n * 균일한 요소와 간격을 사용하여 UI의 체계적인 배열을 도와줌\n * 4와 8의 배수에 기반한 스페이싱 시스템\n */\n\nexport const spacing = {\n  /** 2px - 최소 간격 */\n  xxxs: '2px',\n  /** 4px - 매우 작은 간격 */\n  xxs: '4px',\n  /** 8px - 작은 간격 */\n  xs: '8px',\n  /** 12px - 작은-중간 간격 */\n  s: '12px',\n  /** 16px - 기본 간격 */\n  m: '16px',\n  /** 20px - 중간-큰 간격 */\n  l: '20px',\n  /** 24px - 큰 간격 */\n  xl: '24px',\n  /** 32px - 매우 큰 간격 */\n  xxl: '32px',\n  /** 40px - 최대 간격 */\n  xxxl: '40px',\n} as const;\n\nexport type SpacingTokens = typeof spacing;\n\nexport default spacing;\n","/**\n * Radius Design Tokens\n * UI 요소의 모서리를 둥글게 하여 부드러운 사용자 경험을 제공\n */\n\nexport const radius = {\n  /** 작은 버튼, 입력 필드, 체크박스에 최소한의 둥근 효과를 줄 때 사용 */\n  xs: '4px',\n  /** 카드, 드롭다운, 배너, 일반 버튼에 기본적인 둥근 스타일을 적용할 때 사용 */\n  s: '8px',\n  /** 중간 크기의 카드, 팝업, 모달에 부드러운 곡률을 적용할 때 사용 */\n  m: '12px',\n  /** 큰 모달, 프로필 이미지, 강조 영역에 둥근 효과를 줄 때 사용 */\n  l: '16px',\n  /** Hero Section과 같은 대형 UI 요소에 강한 둥근 효과를 적용할 때 사용 */\n  xl: '20px',\n  /** 아바타, 토글 버튼과 같은 완전한 원형 요소에 적용할 때 사용 */\n  full: '50%',\n} as const;\n\nexport type RadiusTokens = typeof radius;\n\nexport default radius;\n","/**\n * Shadow Design Tokens\n * 그림자는 적용된 UI의 높이(elevation)와 이동 방향, 가장자리 등에 대한 단서를 제공\n */\n\nexport const shadows = {\n  /** 높이 48px 이하의 작은 요소에 가벼운 깊이감을 줄 때 사용 - 아이콘, 버튼, 배지, 입력 필드, 체크박스 등 */\n  s: '0px 1px 8px rgba(0, 0, 0, 0.1)',\n  /** 너비 또는 높이가 48px ~ 200px 사이의 중간 크기 요소를 명확히 구분할 때 사용 - 카드, 모달, 드롭다운, 중간 크기 버튼 등 */\n  m: '0px 1px 16px rgba(0, 0, 0, 0.1)',\n  /** 너비 200px 이상 또는 화면 너비의 50% 이상을 초과하는 큰 요소, 또는 강조가 필요한 구성 요소에 사용 - 다이얼로그, 대형 카드 등 */\n  l: '0px 1px 24px rgba(0, 0, 0, 0.12)',\n} as const;\n\nexport type ShadowTokens = typeof shadows;\n\nexport default shadows;\n","import React from 'react';\nimport { colors } from '../../tokens/colors';\nimport { textStyles } from '../../tokens/typography';\nimport { spacing } from '../../tokens/spacing';\nimport { radius } from '../../tokens/radius';\nimport { shadows } from '../../tokens/shadows';\nimport './ActivityGoalCard.css';\n\nexport interface ActivityGoalCardProps {\n  /** 목표 제목 */\n  title: string;\n  /** 목표 설명 */\n  description?: string;\n  /** 현재 진행 값 */\n  currentValue: number;\n  /** 목표 값 */\n  goalValue: number;\n  /** 단위 (예: 분, 회, kcal) */\n  unit: string;\n  /** 목표 타입에 따른 색상 테마 */\n  theme?: 'primary' | 'success' | 'warning' | 'info';\n  /** 아이콘 */\n  icon?: React.ReactNode;\n  /** 클릭 핸들러 */\n  onClick?: () => void;\n  /** 추가 CSS 클래스 */\n  className?: string;\n}\n\nconst ActivityGoalCard: React.FC<ActivityGoalCardProps> = ({\n  title,\n  description,\n  currentValue,\n  goalValue,\n  unit,\n  theme = 'primary',\n  icon,\n  onClick,\n  className = '',\n}) => {\n  // 진행률 계산\n  const progressPercentage = Math.min((currentValue / goalValue) * 100, 100);\n  const isCompleted = progressPercentage >= 100;\n\n  // 테마별 색상 설정\n  const themeConfig = {\n    primary: {\n      color: colors.primary.mainviolet,\n      bgColor: colors.primary.tint.violet[50],\n      lightColor: colors.primary.tint.violet[100],\n    },\n    success: {\n      color: colors.semantic.state.success,\n      bgColor: colors.primary.tint.green[50],\n      lightColor: colors.primary.tint.green[100],\n    },\n    warning: {\n      color: colors.semantic.state.warning,\n      bgColor: colors.primary.tint.yellow[50],\n      lightColor: colors.primary.tint.yellow[100],\n    },\n    info: {\n      color: colors.semantic.state.info,\n      bgColor: colors.primary.tint.blue[50],\n      lightColor: colors.primary.tint.blue[100],\n    },\n  };\n\n  const currentTheme = themeConfig[theme];\n\n  const cardStyles: React.CSSProperties = {\n    padding: spacing.l,\n    backgroundColor: currentTheme.bgColor,\n    border: `1px solid ${currentTheme.lightColor}`,\n    borderRadius: radius.l,\n    boxShadow: shadows.s,\n    cursor: onClick ? 'pointer' : 'default',\n    transition: 'all 0.3s ease',\n    position: 'relative',\n    overflow: 'hidden',\n  };\n\n  const progressBarStyles: React.CSSProperties = {\n    width: '100%',\n    height: '8px',\n    backgroundColor: colors.semantic.background.secondary,\n    borderRadius: radius.xs,\n    overflow: 'hidden',\n    position: 'relative',\n  };\n\n  const progressFillStyles: React.CSSProperties = {\n    height: '100%',\n    backgroundColor: currentTheme.color,\n    borderRadius: radius.xs,\n    width: `${progressPercentage}%`,\n    transition: 'width 0.5s ease',\n    position: 'relative',\n  };\n\n  return (\n    <div\n      className={`activity-goal-card ${className} ${isCompleted ? 'completed' : ''}`}\n      style={cardStyles}\n      onClick={onClick}\n    >\n      {/* 완료 상태 장식 */}\n      {isCompleted && (\n        <div\n          style={{\n            position: 'absolute',\n            top: spacing.s,\n            right: spacing.s,\n            fontSize: '20px',\n            animation: 'bounce 0.6s ease-in-out',\n          }}\n        >\n          🎉\n        </div>\n      )}\n\n      {/* 헤더 영역 */}\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: spacing.m }}>\n        {icon && (\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: '40px',\n              height: '40px',\n              backgroundColor: currentTheme.color,\n              color: colors.semantic.background.primary,\n              borderRadius: radius.s,\n              marginRight: spacing.s,\n              fontSize: '18px',\n            }}\n          >\n            {icon}\n          </div>\n        )}\n        <div style={{ flex: 1 }}>\n          <h3\n            style={{\n              ...textStyles.heading3,\n              color: colors.semantic.text.primary,\n              margin: 0,\n              marginBottom: spacing.xxxs,\n            }}\n          >\n            {title}\n          </h3>\n          {description && (\n            <p\n              style={{\n                ...textStyles.body3,\n                color: colors.semantic.text.secondary,\n                margin: 0,\n              }}\n            >\n              {description}\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* 진행 상황 수치 */}\n      <div style={{ marginBottom: spacing.s }}>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>\n          <div style={{ display: 'flex', alignItems: 'baseline', gap: spacing.xxxs }}>\n            <span\n              style={{\n                ...textStyles.display2,\n                color: currentTheme.color,\n                fontWeight: 700,\n              }}\n            >\n              {currentValue.toLocaleString()}\n            </span>\n            <span\n              style={{\n                ...textStyles.body2,\n                color: colors.semantic.text.secondary,\n              }}\n            >\n              {unit}\n            </span>\n          </div>\n          <span\n            style={{\n              ...textStyles.body3,\n              color: colors.semantic.text.tertiary,\n            }}\n          >\n            목표: {goalValue.toLocaleString()}\n            {unit}\n          </span>\n        </div>\n      </div>\n\n      {/* 진행 바 */}\n      <div style={progressBarStyles}>\n        <div style={progressFillStyles}>\n          {/* 진행 바 내부 하이라이트 효과 */}\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              height: '50%',\n              background: 'linear-gradient(180deg, rgba(255,255,255,0.3) 0%, transparent 100%)',\n              borderRadius: `${radius.xs} ${radius.xs} 0 0`,\n            }}\n          />\n        </div>\n      </div>\n\n      {/* 진행률 텍스트 */}\n      <div style={{ marginTop: spacing.s, textAlign: 'center' }}>\n        <span\n          style={{\n            ...textStyles.caption,\n            color: isCompleted ? currentTheme.color : colors.semantic.text.tertiary,\n            fontWeight: isCompleted ? 600 : 400,\n          }}\n        >\n          {isCompleted ? '목표 달성! 🎯' : `${progressPercentage.toFixed(1)}% 달성`}\n        </span>\n      </div>\n\n      {/* 배경 패턴 (선택적) */}\n      <div\n        style={{\n          position: 'absolute',\n          top: 0,\n          right: 0,\n          width: '100px',\n          height: '100px',\n          background: `radial-gradient(circle, ${currentTheme.lightColor} 1px, transparent 1px)`,\n          backgroundSize: '12px 12px',\n          opacity: 0.3,\n          pointerEvents: 'none',\n        }}\n      />\n    </div>\n  );\n};\n\nexport default ActivityGoalCard;\n"]}