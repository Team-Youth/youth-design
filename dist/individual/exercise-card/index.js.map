{"version":3,"sources":["../../../src/tokens/colors.ts","../../../src/tokens/typography.ts","../../../src/tokens/spacing.ts","../../../src/tokens/radius.ts","../../../src/tokens/shadows.ts","../../../src/components/exercise-card/ExerciseCard.tsx"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Color Design Tokens\n * 브랜드 아이덴티티와 UI 의미 전달을 위한 컬러 시스템\n */\n\n// All colors export\nexport const colors = {\n  primary: {\n    /** 브랜드 아이덴티티를 대표하는 메인 컬러 */\n    mainviolet: '#7248D9',\n\n    /** 중립적인 컬러 - Typography 및 넓은 영역 Fill에 사용 */\n    gray: {\n      900: '#171717',\n      800: '#292929',\n      700: '#595959',\n      600: '#7A7A7A',\n      500: '#999999',\n      400: '#B8B8B8',\n      300: '#D6D6D6',\n      200: '#EBEBEB',\n      100: '#F5F5F5',\n      black: '#000000',\n      white: '#FFFFFF',\n    },\n\n    /** 넓은 영역에서 Fill로 사용 가능한 중립 색상 계열 */\n    coolGray: {\n      900: '#151719',\n      800: '#25282D',\n      700: '#393F46',\n      600: '#505862',\n      500: '#6E7887',\n      400: '#8D97A5',\n      300: '#AFB6C0',\n      200: '#D1D5DB',\n      100: '#E8EAED',\n      50: '#F3F5F6',\n    },\n\n    /** 메인 컬러보다는 덜 강조되지만, 일러스트 및 보조 정보 강조에 사용 */\n    tint: {\n      violet: {\n        700: '#4B1FA3',\n        600: '#5B27C4',\n        500: '#7248D9',\n        400: '#8B6EE4',\n        300: '#A88FEA',\n        200: '#C8B7F4',\n        100: '#E5DEF9',\n        50: '#F8F4FE',\n      },\n      blue: {\n        700: '#0038B8',\n        600: '#004AF5',\n        500: '#2F6EFF',\n        400: '#5C92FF',\n        300: '#8FB4FF',\n        200: '#C2D6FF',\n        100: '#E0EBFF',\n        50: '#F0F5FF',\n      },\n      red: {\n        700: '#C70000',\n        600: '#E51A1A',\n        500: '#FF2E2E',\n        400: '#FF6666',\n        300: '#FF9494',\n        200: '#FFC2C2',\n        100: '#FFE0E0',\n        50: '#FFF0F0',\n      },\n      yellow: {\n        700: '#F59B00',\n        600: '#FFB200',\n        500: '#FFCC00',\n        400: '#FFDA47',\n        300: '#FFE785',\n        200: '#FFF1B8',\n        100: '#FFF7D6',\n        50: '#FFFAE5',\n      },\n      green: {\n        700: '#00996B',\n        600: '#00AD74',\n        500: '#00C785',\n        400: '#55DD99',\n        300: '#88E7B8',\n        200: '#BBF2D2',\n        100: '#DDF8E6',\n        50: '#F0FFF5',\n      },\n    },\n  },\n\n  /** 텍스트, 상태, 배경, 보더, 비활성, Dim 등 UI 의미 전달용 컬러셋 */\n  semantic: {\n    text: {\n      /** 콘텐츠에서 가장 중요한 정보를 전달할 때 사용 */\n      primary: '#25282D',\n      /** 주요 정보 외의 부가적인 내용을 전달할 때 사용 */\n      secondary: '#505862',\n      /** 시각적 우선순위가 낮은 텍스트에 사용 */\n      tertiary: '#8D97A5',\n      /** 상호작용이 불가능하거나 비활성화된 상태의 텍스트에 사용 */\n      disabled: '#D1D5DB',\n      /** 어두운 배경 위에 사용되는 밝은 텍스트 컬러 */\n      inverse: '#FFFFFF',\n    },\n    state: {\n      /** 작업 완료, 저장 성공 등 긍정적인 상태를 나타냄 */\n      success: '#00C785',\n      /** 주의가 필요한 상황이나 경고 메시지를 전달할 때 사용 */\n      warning: '#FFCC00',\n      /** 오류 상태나 실패 메시지를 표시할 때 사용 */\n      error: '#FF2E2E',\n      /** 보조적인 정보나 안내 메시지를 전달할 때 사용 */\n      info: '#2F6EFF',\n    },\n    background: {\n      /** 기본 페이지 또는 레이아웃의 배경으로 사용 */\n      primary: '#FFFFFF',\n      /** Primary 배경과 대비를 주어 시각적 계층을 형성할 때 사용 */\n      secondary: '#E8EAED',\n    },\n    border: {\n      /** 강조보다는 미묘한 구분을 목적으로 하며, 디바이더 역할까지 겸함 */\n      default: '#EBEBEB',\n      /** 콘텐츠 간의 명확한 구획이 필요할 때 사용하는 보더 컬러 */\n      strong: '#D6D6D6',\n    },\n    disabled: {\n      /** 텍스트 또는 아이콘이 비활성 상태임을 나타낼 때 사용 */\n      foreground: '#D1D5DB',\n      /** 버튼, 입력 필드 등 UI가 비활성화된 배경으로 사용 */\n      background: '#F3F5F6',\n    },\n    dim: {\n      /** 모달, 드롭다운 등 레이어 위에 표시되는 오버레이 배경 */\n      overlay: '#000000B3',\n    },\n  },\n\n  /** 의료 플랫폼 특성을 반영해 피부, 머리카락, 장기 표현용 컬러 */\n  illustration: {\n    skin: {\n      /** 피부 표현 시 밝은 톤으로 사용 */\n      light: '#FFEBE1',\n      /** 피부 기본 톤을 표현할 때 사용 */\n      base: '#FFDAC4',\n      /** 피부 음영 표현용 컬러 */\n      shadow: '#FFCBB7',\n      /** 피부 깊은 음영이나 입체감을 줄 때 사용 */\n      deepshadow: '#F8B29C',\n    },\n    hair: {\n      /** 머리카락 하이라이트 표현용 컬러 */\n      light: '#706965',\n      /** 머리카락 기본 색상을 표현할 때 사용 */\n      base: '#37322F',\n      /** 머리카락 음영 및 입체감 표현용 컬러 */\n      shadow: '#1A1716',\n    },\n    organ: {\n      /** 긍정적 상태나 특정 장기 강조용 컬러 */\n      light: '#FFB5B5',\n      /** 장기 표현 시 기본 색상으로 사용 */\n      base: '#FF8F8F',\n      /** 장기 음영 표현용 컬러 */\n      shadow: '#FB7474',\n      /** 장기 깊은 음영이나 강조를 위해 사용 */\n      deepshadow: '#CD5151',\n    },\n  },\n} as const;\n\n// Type definitions\nexport type ColorTokens = typeof colors;\nexport type PrimaryColors = typeof colors.primary;\nexport type SemanticColors = typeof colors.semantic;\nexport type IllustrationColors = typeof colors.illustration;\n\n// 하위 호환성을 위한 개별 export (deprecated)\n/** @deprecated colors.primary 사용을 권장합니다 */\nexport const primary = colors.primary.mainviolet;\n\n/** @deprecated colors.primary.gray 사용을 권장합니다 */\nexport const gray = colors.primary.gray;\n\n/** @deprecated colors.primary.coolGray 사용을 권장합니다 */\nexport const coolGray = colors.primary.coolGray;\n\n/** @deprecated colors.primary.tint 사용을 권장합니다 */\nexport const tint = colors.primary.tint;\n\n/** @deprecated colors.semantic 사용을 권장합니다 */\nexport const semantic = colors.semantic;\n\n/** @deprecated colors.illustration 사용을 권장합니다 */\nexport const illustration = colors.illustration;\n","/**\n * Typography Design Tokens\n * 서비스와 사용자가 커뮤니케이션하는 주요 요소\n */\n\n// Font Family\nexport const fontFamily = {\n  /** 웹사이트에 사용되는 모든 폰트는 Pretendard를 기반으로 함 */\n  primary: 'Pretendard',\n} as const;\n\n// Font Sizes (rem 단위로 반응형 지원)\nexport const fontSize = {\n  xxxxl: '2rem', // 32px\n  xxxl: '1.75rem', // 28px\n  xxl: '1.5rem', // 24px\n  xl: '1.25rem', // 20px\n  l: '1.125rem', // 18px\n  m: '1rem', // 16px\n  s: '0.875rem', // 14px\n  xs: '0.75rem', // 12px\n  xxs: '0.625rem', // 10px\n  xxxs: '0.688rem', // 11px\n} as const;\n\n// Font Weights\nexport const fontWeight = {\n  bold: 700,\n  semibold: 600,\n  medium: 500,\n  regular: 400,\n} as const;\n\n// Line Heights\nexport const lineHeight = {\n  xxxxl: '42px',\n  xxxl: '36px',\n  xxl: '32px',\n  xl: '28px',\n  l: '24px',\n  m: '24px',\n  s: '22px',\n  xs: '20px',\n  xxs: '18px',\n  xxxs: '17px',\n} as const;\n\n// Letter Spacings\nexport const letterSpacing = {\n  m: '0',\n  s: '-1%',\n  xs: '-2%',\n} as const;\n\n// Text Styles (React.CSSProperties 호환)\nexport const textStyles = {\n  /** 주목도를 높이고 큰 타이틀 영역 강조에 사용 */\n  display1: {\n    fontSize: fontSize.xxxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 중간 크기 타이틀에 사용 */\n  display2: {\n    fontSize: fontSize.xxxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 정보성 카드 타이틀에 주로 사용 */\n  heading1: {\n    fontSize: fontSize.xxl,\n    fontWeight: fontWeight.bold,\n    lineHeight: lineHeight.xxl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 섹션 구분 타이틀 등에 사용 */\n  heading2: {\n    fontSize: fontSize.xl,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.xl,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 소제목 등에 사용 */\n  heading3: {\n    fontSize: fontSize.l,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 리스트 아이템, 버튼 텍스트 등에 사용 */\n  heading4: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.m,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 부가 정보, 캡션 등에 사용 */\n  heading5: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.semibold,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 주요 본문 텍스트에 사용 */\n  body1: {\n    fontSize: fontSize.m,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.l,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 본문 텍스트에 사용 */\n  body2: {\n    fontSize: fontSize.s,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.s,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 본문 보조, 하위 위계 텍스트 쓰임새로 사용 권장 */\n  body3: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xxs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n  /** 보조 정보나 컴포넌트 레벨에서 사용 */\n  caption: {\n    fontSize: fontSize.xs,\n    fontWeight: fontWeight.regular,\n    lineHeight: lineHeight.xs,\n    letterSpacing: letterSpacing.m,\n    fontFamily: fontFamily.primary,\n  },\n} as const;\n\n// All typography export\nexport const typography = {\n  fontFamily,\n  fontSize,\n  fontWeight,\n  lineHeight,\n  letterSpacing,\n  textStyles,\n} as const;\n\nexport default typography;\n","/**\n * Spacing Design Tokens\n * 균일한 요소와 간격을 사용하여 UI의 체계적인 배열을 도와줌\n * 4와 8의 배수에 기반한 스페이싱 시스템\n */\n\nexport const spacing = {\n  /** 2px - 최소 간격 */\n  xxxs: '2px',\n  /** 4px - 매우 작은 간격 */\n  xxs: '4px',\n  /** 8px - 작은 간격 */\n  xs: '8px',\n  /** 12px - 작은-중간 간격 */\n  s: '12px',\n  /** 16px - 기본 간격 */\n  m: '16px',\n  /** 20px - 중간-큰 간격 */\n  l: '20px',\n  /** 24px - 큰 간격 */\n  xl: '24px',\n  /** 32px - 매우 큰 간격 */\n  xxl: '32px',\n  /** 40px - 최대 간격 */\n  xxxl: '40px',\n} as const;\n\nexport type SpacingTokens = typeof spacing;\n\nexport default spacing;\n","/**\n * Radius Design Tokens\n * UI 요소의 모서리를 둥글게 하여 부드러운 사용자 경험을 제공\n */\n\nexport const radius = {\n  /** 작은 버튼, 입력 필드, 체크박스에 최소한의 둥근 효과를 줄 때 사용 */\n  xs: '4px',\n  /** 카드, 드롭다운, 배너, 일반 버튼에 기본적인 둥근 스타일을 적용할 때 사용 */\n  s: '8px',\n  /** 중간 크기의 카드, 팝업, 모달에 부드러운 곡률을 적용할 때 사용 */\n  m: '12px',\n  /** 큰 모달, 프로필 이미지, 강조 영역에 둥근 효과를 줄 때 사용 */\n  l: '16px',\n  /** Hero Section과 같은 대형 UI 요소에 강한 둥근 효과를 적용할 때 사용 */\n  xl: '20px',\n  /** 아바타, 토글 버튼과 같은 완전한 원형 요소에 적용할 때 사용 */\n  full: '50%',\n} as const;\n\nexport type RadiusTokens = typeof radius;\n\nexport default radius;\n","/**\n * Shadow Design Tokens\n * 그림자는 적용된 UI의 높이(elevation)와 이동 방향, 가장자리 등에 대한 단서를 제공\n */\n\nexport const shadows = {\n  /** 높이 48px 이하의 작은 요소에 가벼운 깊이감을 줄 때 사용 - 아이콘, 버튼, 배지, 입력 필드, 체크박스 등 */\n  s: '0px 1px 8px rgba(0, 0, 0, 0.1)',\n  /** 너비 또는 높이가 48px ~ 200px 사이의 중간 크기 요소를 명확히 구분할 때 사용 - 카드, 모달, 드롭다운, 중간 크기 버튼 등 */\n  m: '0px 1px 16px rgba(0, 0, 0, 0.1)',\n  /** 너비 200px 이상 또는 화면 너비의 50% 이상을 초과하는 큰 요소, 또는 강조가 필요한 구성 요소에 사용 - 다이얼로그, 대형 카드 등 */\n  l: '0px 1px 24px rgba(0, 0, 0, 0.12)',\n} as const;\n\nexport type ShadowTokens = typeof shadows;\n\nexport default shadows;\n","import React, { useState } from 'react';\nimport { colors } from '../../tokens/colors';\nimport { textStyles } from '../../tokens/typography';\nimport { spacing } from '../../tokens/spacing';\nimport { radius } from '../../tokens/radius';\nimport { shadows } from '../../tokens/shadows';\nimport './ExerciseCard.css';\n\nexport interface ExerciseCardProps {\n  /** 운동 이름 */\n  title: string;\n  /** 운동 설명 또는 부가 정보 */\n  description?: string;\n  /** 운동 타입 (예: 유산소, 근력, 스트레칭) */\n  type?: 'cardio' | 'strength' | 'stretching' | 'balance';\n  /** 예상 소요시간 (분) */\n  duration?: number;\n  /** 칼로리 소모량 */\n  calories?: number;\n  /** 운동 아이콘 또는 이모지 */\n  icon?: React.ReactNode;\n  /** 완료 상태 */\n  isCompleted?: boolean;\n  /** 즐겨찾기 상태 */\n  isFavorite?: boolean;\n  /** 너비 설정 ('fill'이면 부모 컨테이너 100%, 아니면 지정된 값) */\n  width?: 'fill' | (string & {});\n  /** 카드 클릭 핸들러 */\n  onClick?: () => void;\n  /** 즐겨찾기 토글 핸들러 */\n  onFavoriteToggle?: () => void;\n  /** 완료 토글 핸들러 */\n  onCompleteToggle?: () => void;\n  /** 추가 CSS 클래스 */\n  className?: string;\n}\n\nconst ExerciseCard: React.FC<ExerciseCardProps> = ({\n  title,\n  description,\n  type = 'cardio',\n  duration,\n  calories,\n  icon,\n  isCompleted = false,\n  isFavorite = false,\n  width = '300px',\n  onClick,\n  onFavoriteToggle,\n  onCompleteToggle,\n  className = '',\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  // 운동 타입별 색상 및 아이콘\n  const typeConfig = {\n    cardio: {\n      color: colors.primary.tint.blue[500],\n      bgColor: colors.primary.tint.blue[50],\n      icon: '🏃‍♂️',\n      label: '유산소',\n    },\n    strength: {\n      color: colors.primary.tint.red[500],\n      bgColor: colors.primary.tint.red[50],\n      icon: '💪',\n      label: '근력',\n    },\n    stretching: {\n      color: colors.primary.tint.green[500],\n      bgColor: colors.primary.tint.green[50],\n      icon: '🧘‍♀️',\n      label: '스트레칭',\n    },\n    balance: {\n      color: colors.primary.tint.violet[500],\n      bgColor: colors.primary.tint.violet[50],\n      icon: '⚖️',\n      label: '밸런스',\n    },\n  };\n\n  const currentTypeConfig = typeConfig[type];\n\n  // width 동적 설정\n  const getWidth = () => {\n    if (width === 'fill') {\n      return '100%';\n    }\n    return width;\n  };\n\n  const cardStyles: React.CSSProperties = {\n    display: 'flex',\n    alignItems: 'center',\n    padding: spacing.m,\n    backgroundColor: isCompleted ? colors.primary.coolGray[50] : colors.semantic.background.primary,\n    border: `1px solid ${isHovered ? currentTypeConfig.color : colors.semantic.border.default}`,\n    borderRadius: radius.m,\n    boxShadow: isHovered ? shadows.m : shadows.s,\n    cursor: 'pointer',\n    transition: 'all 0.3s ease',\n    transform: isHovered ? 'translateY(-2px)' : 'translateY(0)',\n    opacity: isCompleted ? 0.7 : 1,\n    position: 'relative',\n    overflow: 'hidden',\n    width: getWidth(),\n    minWidth: '300px', // 최소 너비 설정\n  };\n\n  const handleCardClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onClick) onClick();\n  };\n\n  const handleFavoriteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onFavoriteToggle) onFavoriteToggle();\n  };\n\n  const handleCompleteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (onCompleteToggle) onCompleteToggle();\n  };\n\n  return (\n    <div\n      className={`exercise-card ${className}`}\n      style={{ ...cardStyles }}\n      onClick={handleCardClick}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {/* 완료 상태 표시 스트라이프 */}\n      {isCompleted && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '4px',\n            height: '100%',\n            backgroundColor: colors.semantic.state.success,\n          }}\n        />\n      )}\n\n      {/* 운동 타입 아이콘 */}\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: '48px',\n          height: '48px',\n          backgroundColor: currentTypeConfig.bgColor,\n          borderRadius: radius.s,\n          marginRight: spacing.m,\n          fontSize: '20px',\n        }}\n      >\n        {icon || currentTypeConfig.icon}\n      </div>\n\n      {/* 메인 콘텐츠 */}\n      <div style={{ flex: 1, minWidth: 0 }}>\n        <div style={{ display: 'flex', alignItems: 'center', marginBottom: spacing.xxs }}>\n          <h3\n            style={{\n              ...textStyles.heading4,\n              color: isCompleted ? colors.semantic.text.tertiary : colors.semantic.text.primary,\n              margin: 0,\n              textDecoration: isCompleted ? 'line-through' : 'none',\n            }}\n          >\n            {title}\n          </h3>\n          <span\n            style={{\n              ...textStyles.caption,\n              color: currentTypeConfig.color,\n              backgroundColor: currentTypeConfig.bgColor,\n              padding: `${spacing.xxxs} ${spacing.xs}`,\n              borderRadius: radius.xs,\n              marginLeft: spacing.xs,\n              fontSize: '10px',\n              fontWeight: 500,\n            }}\n          >\n            {currentTypeConfig.label}\n          </span>\n        </div>\n\n        {description && (\n          <p\n            style={{\n              ...textStyles.body3,\n              color: colors.semantic.text.secondary,\n              margin: 0,\n              marginBottom: spacing.xs,\n              overflow: 'hidden',\n              textOverflow: 'ellipsis',\n              whiteSpace: 'nowrap',\n            }}\n          >\n            {description}\n          </p>\n        )}\n\n        {/* 운동 정보 */}\n        <div style={{ display: 'flex', gap: spacing.m, alignItems: 'center' }}>\n          {duration && (\n            <div style={{ display: 'flex', alignItems: 'center', gap: spacing.xxs }}>\n              <span style={{ fontSize: '12px' }}>⏱️</span>\n              <span\n                style={{\n                  ...textStyles.caption,\n                  color: colors.semantic.text.tertiary,\n                }}\n              >\n                {duration}분\n              </span>\n            </div>\n          )}\n          {calories && (\n            <div style={{ display: 'flex', alignItems: 'center', gap: spacing.xxs }}>\n              <span style={{ fontSize: '12px' }}>🔥</span>\n              <span\n                style={{\n                  ...textStyles.caption,\n                  color: colors.semantic.text.tertiary,\n                }}\n              >\n                {calories}kcal\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 액션 버튼들 */}\n      <div style={{ display: 'flex', gap: spacing.xs, alignItems: 'center' }}>\n        {/* 즐겨찾기 버튼 */}\n        <button\n          onClick={handleFavoriteClick}\n          style={{\n            background: 'none',\n            border: 'none',\n            cursor: 'pointer',\n            fontSize: '16px',\n            padding: spacing.xxs,\n            borderRadius: radius.xs,\n            transition: 'all 0.2s ease',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n          title={isFavorite ? '즐겨찾기 해제' : '즐겨찾기 추가'}\n        >\n          {isFavorite ? '⭐' : '☆'}\n        </button>\n\n        {/* 완료 버튼 */}\n        <button\n          onClick={handleCompleteClick}\n          style={{\n            background: 'none',\n            border: `1px solid ${isCompleted ? colors.semantic.state.success : colors.semantic.border.default}`,\n            cursor: 'pointer',\n            padding: spacing.xs,\n            borderRadius: radius.xs,\n            transition: 'all 0.2s ease',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: isCompleted ? colors.semantic.state.success : 'transparent',\n          }}\n          title={isCompleted ? '완료 취소' : '완료 표시'}\n        >\n          <span\n            style={{\n              fontSize: '12px',\n              color: isCompleted\n                ? colors.semantic.background.primary\n                : colors.semantic.text.tertiary,\n            }}\n          >\n            {isCompleted ? '✓' : '○'}\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ExerciseCard;\n"]}