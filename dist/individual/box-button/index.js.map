{"version":3,"sources":["../../../src/tokens/colors.ts","../../../src/components/box-button/Button.tsx"],"names":["level","disabled","isLoading","isPressed","isHovered"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Color Design Tokens\n * 브랜드 아이덴티티와 UI 의미 전달을 위한 컬러 시스템\n */\n\n// All colors export\nexport const colors = {\n  primary: {\n    /** 브랜드 아이덴티티를 대표하는 메인 컬러 */\n    mainviolet: '#7248D9',\n\n    /** 중립적인 컬러 - Typography 및 넓은 영역 Fill에 사용 */\n    gray: {\n      900: '#171717',\n      800: '#292929',\n      700: '#595959',\n      600: '#7A7A7A',\n      500: '#999999',\n      400: '#B8B8B8',\n      300: '#D6D6D6',\n      200: '#EBEBEB',\n      100: '#F5F5F5',\n      black: '#000000',\n      white: '#FFFFFF',\n    },\n\n    /** 넓은 영역에서 Fill로 사용 가능한 중립 색상 계열 */\n    coolGray: {\n      900: '#151719',\n      800: '#25282D',\n      700: '#393F46',\n      600: '#505862',\n      500: '#6E7887',\n      400: '#8D97A5',\n      300: '#AFB6C0',\n      200: '#D1D5DB',\n      100: '#E8EAED',\n      50: '#F3F5F6',\n    },\n\n    /** 메인 컬러보다는 덜 강조되지만, 일러스트 및 보조 정보 강조에 사용 */\n    tint: {\n      violet: {\n        700: '#4B1FA3',\n        600: '#5B27C4',\n        500: '#7248D9',\n        400: '#8B6EE4',\n        300: '#A88FEA',\n        200: '#C8B7F4',\n        100: '#E5DEF9',\n        50: '#F8F4FE',\n      },\n      blue: {\n        700: '#0038B8',\n        600: '#004AF5',\n        500: '#2F6EFF',\n        400: '#5C92FF',\n        300: '#8FB4FF',\n        200: '#C2D6FF',\n        100: '#E0EBFF',\n        50: '#F0F5FF',\n      },\n      red: {\n        700: '#C70000',\n        600: '#E51A1A',\n        500: '#FF2E2E',\n        400: '#FF6666',\n        300: '#FF9494',\n        200: '#FFC2C2',\n        100: '#FFE0E0',\n        50: '#FFF0F0',\n      },\n      yellow: {\n        700: '#F59B00',\n        600: '#FFB200',\n        500: '#FFCC00',\n        400: '#FFDA47',\n        300: '#FFE785',\n        200: '#FFF1B8',\n        100: '#FFF7D6',\n        50: '#FFFAE5',\n      },\n      green: {\n        700: '#00996B',\n        600: '#00AD74',\n        500: '#00C785',\n        400: '#55DD99',\n        300: '#88E7B8',\n        200: '#BBF2D2',\n        100: '#DDF8E6',\n        50: '#F0FFF5',\n      },\n    },\n  },\n\n  /** 텍스트, 상태, 배경, 보더, 비활성, Dim 등 UI 의미 전달용 컬러셋 */\n  semantic: {\n    text: {\n      /** 콘텐츠에서 가장 중요한 정보를 전달할 때 사용 */\n      primary: '#25282D',\n      /** 주요 정보 외의 부가적인 내용을 전달할 때 사용 */\n      secondary: '#505862',\n      /** 시각적 우선순위가 낮은 텍스트에 사용 */\n      tertiary: '#8D97A5',\n      /** 상호작용이 불가능하거나 비활성화된 상태의 텍스트에 사용 */\n      disabled: '#D1D5DB',\n      /** 어두운 배경 위에 사용되는 밝은 텍스트 컬러 */\n      inverse: '#FFFFFF',\n    },\n    state: {\n      /** 작업 완료, 저장 성공 등 긍정적인 상태를 나타냄 */\n      success: '#00C785',\n      /** 주의가 필요한 상황이나 경고 메시지를 전달할 때 사용 */\n      warning: '#FFCC00',\n      /** 오류 상태나 실패 메시지를 표시할 때 사용 */\n      error: '#FF2E2E',\n      /** 보조적인 정보나 안내 메시지를 전달할 때 사용 */\n      info: '#2F6EFF',\n    },\n    background: {\n      /** 기본 페이지 또는 레이아웃의 배경으로 사용 */\n      primary: '#FFFFFF',\n      /** Primary 배경과 대비를 주어 시각적 계층을 형성할 때 사용 */\n      secondary: '#E8EAED',\n    },\n    border: {\n      /** 강조보다는 미묘한 구분을 목적으로 하며, 디바이더 역할까지 겸함 */\n      default: '#EBEBEB',\n      /** 콘텐츠 간의 명확한 구획이 필요할 때 사용하는 보더 컬러 */\n      strong: '#D6D6D6',\n    },\n    disabled: {\n      /** 텍스트 또는 아이콘이 비활성 상태임을 나타낼 때 사용 */\n      foreground: '#D1D5DB',\n      /** 버튼, 입력 필드 등 UI가 비활성화된 배경으로 사용 */\n      background: '#F3F5F6',\n    },\n    dim: {\n      /** 모달, 드롭다운 등 레이어 위에 표시되는 오버레이 배경 */\n      overlay: '#000000B3',\n    },\n  },\n\n  /** 의료 플랫폼 특성을 반영해 피부, 머리카락, 장기 표현용 컬러 */\n  illustration: {\n    skin: {\n      /** 피부 표현 시 밝은 톤으로 사용 */\n      light: '#FFEBE1',\n      /** 피부 기본 톤을 표현할 때 사용 */\n      base: '#FFDAC4',\n      /** 피부 음영 표현용 컬러 */\n      shadow: '#FFCBB7',\n      /** 피부 깊은 음영이나 입체감을 줄 때 사용 */\n      deepshadow: '#F8B29C',\n    },\n    hair: {\n      /** 머리카락 하이라이트 표현용 컬러 */\n      light: '#706965',\n      /** 머리카락 기본 색상을 표현할 때 사용 */\n      base: '#37322F',\n      /** 머리카락 음영 및 입체감 표현용 컬러 */\n      shadow: '#1A1716',\n    },\n    organ: {\n      /** 긍정적 상태나 특정 장기 강조용 컬러 */\n      light: '#FFB5B5',\n      /** 장기 표현 시 기본 색상으로 사용 */\n      base: '#FF8F8F',\n      /** 장기 음영 표현용 컬러 */\n      shadow: '#FB7474',\n      /** 장기 깊은 음영이나 강조를 위해 사용 */\n      deepshadow: '#CD5151',\n    },\n  },\n} as const;\n\n// Type definitions\nexport type ColorTokens = typeof colors;\nexport type PrimaryColors = typeof colors.primary;\nexport type SemanticColors = typeof colors.semantic;\nexport type IllustrationColors = typeof colors.illustration;\n\n// 하위 호환성을 위한 개별 export (deprecated)\n/** @deprecated colors.primary 사용을 권장합니다 */\nexport const primary = colors.primary.mainviolet;\n\n/** @deprecated colors.primary.gray 사용을 권장합니다 */\nexport const gray = colors.primary.gray;\n\n/** @deprecated colors.primary.coolGray 사용을 권장합니다 */\nexport const coolGray = colors.primary.coolGray;\n\n/** @deprecated colors.primary.tint 사용을 권장합니다 */\nexport const tint = colors.primary.tint;\n\n/** @deprecated colors.semantic 사용을 권장합니다 */\nexport const semantic = colors.semantic;\n\n/** @deprecated colors.illustration 사용을 권장합니다 */\nexport const illustration = colors.illustration;\n","import React, { useState } from 'react';\nimport { colors } from '../../tokens/colors';\nimport './Button.css';\n\nexport interface ButtonProps {\n  type?: 'solid' | 'outlined' | 'text';\n  level?: 'CTA' | 'secondary' | 'tertiary';\n  size?: 'l' | 'm' | 's';\n  width?: 'fill' | (string & {});\n  disabled?: boolean;\n  icon?: {\n    left?: React.ReactNode;\n    right?: React.ReactNode;\n  };\n  children?: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n  isLoading?: boolean;\n  underline?: boolean; // text 타입에서 사용\n}\n\nconst LoadingIcon = () => (\n  <svg width=\"16\" height=\"16\" viewBox=\"0 0 50 50\" className=\"loading-icon\">\n    <circle\n      cx=\"25\"\n      cy=\"25\"\n      r=\"20\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"4\"\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\nexport const Button: React.FC<ButtonProps> = ({\n  type = 'solid',\n  level = 'CTA',\n  size = 'l',\n  width = '320px',\n  disabled = false,\n  icon,\n  children,\n  onClick,\n  className = '',\n  isLoading = false,\n  underline = false,\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n  const [isPressed, setIsPressed] = useState(false);\n\n  // Size configurations\n  const sizeConfig = {\n    l: {\n      paddingX: type === 'text' ? '12px' : '16px',\n      paddingY: type === 'text' ? '0px' : '12px',\n      borderRadius: type === 'text' ? '12px' : '12px',\n      width: '320px',\n      height: type === 'text' ? '32px' : '48px',\n      fontSize: '16px',\n      fontWeight: '500',\n      iconSize: '20px',\n    },\n    m: {\n      paddingX: type === 'text' ? '8px' : '12px',\n      paddingY: type === 'text' ? '0px' : '8px',\n      borderRadius: type === 'text' ? '12px' : '8px',\n      width: '320px',\n      height: type === 'text' ? '24px' : '40px',\n      fontSize: '14px',\n      fontWeight: '500',\n      iconSize: '16px',\n    },\n    s: {\n      paddingX: type === 'text' ? '8px' : '8px',\n      paddingY: type === 'text' ? '0px' : '6px',\n      borderRadius: type === 'text' ? '12px' : '4px',\n      width: '320px',\n      height: type === 'text' ? '20px' : '32px',\n      fontSize: '12px',\n      fontWeight: '500',\n      iconSize: type === 'text' ? '14px' : '16px',\n    },\n  };\n\n  const getStyles = (): React.CSSProperties => {\n    const config = sizeConfig[size];\n\n    // width 동적 설정\n    const getWidth = () => {\n      if (width === 'fill') {\n        return '100%';\n      }\n      return width;\n    };\n\n    let styles: React.CSSProperties = {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: `${config.paddingY} ${config.paddingX}`,\n      borderRadius: config.borderRadius,\n      width: getWidth(),\n      height: config.height,\n      border: type === 'text' ? 'none' : '1px solid transparent',\n      cursor: disabled || isLoading ? 'not-allowed' : 'pointer',\n      transition: 'all 0.2s ease',\n      fontSize: config.fontSize,\n      fontWeight: config.fontWeight,\n      textDecoration: type === 'text' && underline ? 'underline' : 'none',\n      background: 'none',\n    };\n\n    // Type별 스타일 적용\n    if (type === 'solid') {\n      styles = { ...styles, ...getSolidStyles(level, disabled, isLoading, isPressed, isHovered) };\n    } else if (type === 'outlined') {\n      styles = { ...styles, ...getOutlinedStyles(disabled, isLoading, isPressed, isHovered) };\n    } else if (type === 'text') {\n      styles = { ...styles, ...getTextStyles(disabled, isPressed, isHovered) };\n    }\n\n    return styles;\n  };\n\n  const getSolidStyles = (\n    level: string,\n    disabled: boolean,\n    isLoading: boolean,\n    isPressed: boolean,\n    isHovered: boolean,\n  ) => {\n    if (disabled) {\n      return {\n        backgroundColor: colors.semantic.disabled.background,\n        color: colors.semantic.disabled.foreground,\n        border: `1px solid ${colors.semantic.disabled.background}`,\n      };\n    }\n\n    if (isLoading) {\n      if (level === 'CTA') {\n        return {\n          backgroundColor: colors.primary.mainviolet,\n          color: colors.semantic.background.primary,\n          border: `1px solid ${colors.primary.mainviolet}`,\n        };\n      } else if (level === 'secondary') {\n        return {\n          backgroundColor: colors.primary.tint.violet[200],\n          color: colors.primary.mainviolet,\n          border: `1px solid ${colors.primary.tint.violet[200]}`,\n        };\n      } else if (level === 'tertiary') {\n        return {\n          backgroundColor: colors.semantic.disabled.background,\n          color: colors.semantic.text.primary,\n          border: `1px solid ${colors.semantic.disabled.background}`,\n        };\n      }\n    }\n\n    // Level별 색상 정의\n    const levelColors = {\n      CTA: {\n        normal: { bg: colors.primary.mainviolet, text: colors.semantic.background.primary },\n        hovered: { bg: colors.primary.tint.violet[600], text: colors.semantic.background.primary },\n        pressed: { bg: colors.primary.tint.violet[700], text: colors.semantic.background.primary },\n      },\n      secondary: {\n        normal: { bg: colors.primary.tint.violet[100], text: colors.primary.mainviolet },\n        hovered: { bg: colors.primary.tint.violet[200], text: colors.primary.mainviolet },\n        pressed: { bg: colors.primary.tint.violet[300], text: colors.primary.tint.violet[600] },\n      },\n      tertiary: {\n        normal: { bg: colors.semantic.disabled.background, text: colors.semantic.text.primary },\n        hovered: { bg: colors.primary.coolGray[100], text: colors.semantic.text.primary },\n        pressed: { bg: colors.semantic.disabled.foreground, text: colors.semantic.text.primary },\n      },\n    };\n\n    const currentLevel = levelColors[level as keyof typeof levelColors];\n    let currentState: {\n      bg: string;\n      text: string;\n    } = currentLevel.normal;\n\n    if (isPressed) {\n      currentState = currentLevel.pressed;\n    } else if (isHovered) {\n      currentState = currentLevel.hovered;\n    }\n\n    return {\n      backgroundColor: currentState.bg,\n      color: currentState.text,\n      border: `1px solid ${currentState.bg}`,\n    };\n  };\n\n  const getOutlinedStyles = (\n    disabled: boolean,\n    isLoading: boolean,\n    isPressed: boolean,\n    isHovered: boolean,\n  ) => {\n    if (disabled) {\n      return {\n        backgroundColor: colors.semantic.background.primary,\n        color: colors.semantic.disabled.foreground,\n        border: `1px solid ${colors.semantic.disabled.foreground}`,\n      };\n    }\n\n    if (isLoading) {\n      return {\n        backgroundColor: colors.semantic.background.primary,\n        color: colors.semantic.text.primary,\n        border: `1px solid ${colors.semantic.border.strong}`,\n      };\n    }\n\n    if (isPressed) {\n      return {\n        backgroundColor: colors.primary.coolGray[100],\n        color: colors.semantic.text.primary,\n        border: `1px solid ${colors.semantic.border.strong}`,\n      };\n    } else if (isHovered) {\n      return {\n        backgroundColor: colors.semantic.disabled.background,\n        color: colors.semantic.text.primary,\n        border: `1px solid ${colors.semantic.border.strong}`,\n      };\n    } else {\n      return {\n        backgroundColor: colors.semantic.background.primary,\n        color: colors.semantic.text.primary,\n        border: `1px solid ${colors.semantic.border.strong}`,\n      };\n    }\n  };\n\n  const getTextStyles = (disabled: boolean, isPressed: boolean, isHovered: boolean) => {\n    if (disabled) {\n      return {\n        color: colors.semantic.disabled.foreground,\n        backgroundColor: 'transparent',\n      };\n    }\n\n    // text 버튼은 배경색 변화 없이 텍스트 색상만 변경\n    return {\n      color: colors.semantic.text.primary,\n      backgroundColor: 'transparent',\n    };\n  };\n\n  const handleClick = () => {\n    if (!disabled && !isLoading && onClick) {\n      onClick();\n    }\n  };\n\n  const handleMouseEnter = () => {\n    if (!disabled && !isLoading) {\n      setIsHovered(true);\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    setIsPressed(false);\n  };\n\n  const handleMouseDown = () => {\n    if (!disabled && !isLoading) {\n      setIsPressed(true);\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsPressed(false);\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIcon />;\n    }\n\n    const config = sizeConfig[size];\n    const iconStyle = {\n      width: config.iconSize,\n      height: config.iconSize,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    };\n\n    return (\n      <div style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n        {icon?.left && <div style={iconStyle}>{icon.left}</div>}\n        {children && <span>{children}</span>}\n        {icon?.right && <div style={iconStyle}>{icon.right}</div>}\n      </div>\n    );\n  };\n\n  return (\n    <button\n      style={getStyles()}\n      onClick={handleClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      disabled={disabled || isLoading}\n      className={className}\n    >\n      {renderContent()}\n    </button>\n  );\n};\n"]}